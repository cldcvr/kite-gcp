<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Fri Aug 16 12:10:38 PDT 2013 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="CDK 0.6.0"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/esammer/Documents/Code/cdk/target/checkout/lib/jdiff.jar -classpath /Users/esammer/Documents/Code/cdk/target/checkout/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-core/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-crunch/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-flume/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-hcatalog/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-flume-avro-event-serializer/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-maven-plugin/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-tools/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-core/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-avro/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-json/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-saxon/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-tika-core/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-tika-decompress/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-twitter/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-hadoop-sequencefile/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-solr-core/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-solr-cell/target/classes:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-all/target/classes:/Users/esammer/.m2/repository/org/apache/hcatalog/hcatalog-core/0.5.0-cdh4.3.0/hcatalog-core-0.5.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar:/Users/esammer/.m2/repository/xml-apis/xml-apis/1.4.01/xml-apis-1.4.01.jar:/Users/esammer/.m2/repository/com/twitter/parquet-generator/1.0.0/parquet-generator-1.0.0.jar:/Users/esammer/.m2/repository/com/sun/jersey/jersey-json/1.8/jersey-json-1.8.jar:/Users/esammer/.m2/repository/commons-net/commons-net/3.1/commons-net-3.1.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-server-common/2.0.0-cdh4.3.0/hadoop-yarn-server-common-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-hs/2.0.0-cdh4.3.0/hadoop-mapreduce-client-hs-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.8/jackson-core-asl-1.8.8.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-tika-core/0.6.0/cdk-morphlines-tika-core-0.6.0.jar:/Users/esammer/.m2/repository/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar:/Users/esammer/.m2/repository/org/codehaus/plexus/plexus-utils/3.0/plexus-utils-3.0.jar:/Users/esammer/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-builtins/0.10.0-cdh4.3.0/hive-builtins-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/commons-configuration/commons-configuration/1.6/commons-configuration-1.6.jar:/Users/esammer/.m2/repository/commons-pool/commons-pool/1.5.4/commons-pool-1.5.4.jar:/Users/esammer/.m2/repository/com/googlecode/javaewah/JavaEWAH/0.3.2/JavaEWAH-0.3.2.jar:/Users/esammer/.m2/repository/com/twitter/parquet-column/1.0.0/parquet-column-1.0.0.jar:/Users/esammer/.m2/repository/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.jar:/Users/esammer/.m2/repository/org/apache/solr/solr-core/4.4.0/solr-core-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-repository-metadata/2.0.6/maven-repository-metadata-2.0.6.jar:/Users/esammer/.m2/repository/org/apache/james/apache-mime4j-dom/0.7.2/apache-mime4j-dom-0.7.2.jar:/Users/esammer/.m2/repository/org/apache/httpcomponents/httpclient/4.2.3/httpclient-4.2.3.jar:/Users/esammer/.m2/repository/com/linkedin/haivvreo/1.0.7-cdh-4/haivvreo-1.0.7-cdh-4.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-serde/0.10.0-cdh4.3.0/hive-serde-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/com/sun/jersey/jersey-client/1.8/jersey-client-1.8.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-spatial/4.4.0/lucene-spatial-4.4.0.jar:/Users/esammer/.m2/repository/com/googlecode/concurrentlinkedhashmap/concurrentlinkedhashmap-lru/1.2/concurrentlinkedhashmap-lru-1.2.jar:/Users/esammer/.m2/repository/org/apache/velocity/velocity/1.7/velocity-1.7.jar:/Users/esammer/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-plugin-api/2.0.6/maven-plugin-api-2.0.6.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-client/2.0.0-cdh4.3.0/hadoop-yarn-client-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/joda-time/joda-time/2.2/joda-time-2.2.jar:/Users/esammer/.m2/repository/org/apache/httpcomponents/httpmime/4.2.3/httpmime-4.2.3.jar:/Users/esammer/.m2/repository/jdom/jdom/1.0/jdom-1.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-core/3.0/maven-core-3.0.jar:/Users/esammer/.m2/repository/javax/xml/bind/jaxb-api/2.2.2/jaxb-api-2.2.2.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-data-hcatalog/0.6.0/cdk-data-hcatalog-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/poi/poi-scratchpad/3.9/poi-scratchpad-3.9.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-common/2.0.0-cdh4.3.0/hadoop-yarn-common-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/xerial/snappy/snappy-java/1.0.4.1/snappy-java-1.0.4.1.jar:/Users/esammer/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/Users/esammer/.m2/repository/org/antlr/ST4/4.0.4/ST4-4.0.4.jar:/Users/esammer/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/Users/esammer/.m2/repository/org/apache/poi/poi-ooxml-schemas/3.9/poi-ooxml-schemas-3.9.jar:/Users/esammer/.m2/repository/com/google/guava/guava/11.0.2/guava-11.0.2.jar:/Users/esammer/.m2/repository/org/datanucleus/datanucleus-core/2.0.3/datanucleus-core-2.0.3.jar:/Users/esammer/.m2/repository/com/twitter/parquet-encoding/1.0.0/parquet-encoding-1.0.0.jar:/Users/esammer/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/Users/esammer/.m2/repository/org/apache/tika/tika-core/1.3/tika-core-1.3.jar:/Users/esammer/.m2/repository/org/sonatype/aether/aether-impl/1.7/aether-impl-1.7.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-rcm/2.1.1/grizzly-rcm-2.1.1.jar:/Users/esammer/.m2/repository/org/codehaus/jackson/jackson-jaxrs/1.7.1/jackson-jaxrs-1.7.1.jar:/Users/esammer/.m2/repository/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar:/Users/esammer/.m2/repository/net/sf/saxon/Saxon-HE/9.5.1-1/Saxon-HE-9.5.1-1.jar:/Users/esammer/.m2/repository/com/google/protobuf/protobuf-java/2.4.0a/protobuf-java-2.4.0a.jar:/Users/esammer/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/Users/esammer/.m2/repository/org/noggit/noggit/0.5/noggit-0.5.jar:/Users/esammer/.m2/repository/com/twitter/parquet-common/1.0.0/parquet-common-1.0.0.jar:/Users/esammer/.m2/repository/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar:/Users/esammer/.m2/repository/org/slf4j/slf4j-simple/1.6.1/slf4j-simple-1.6.1.jar:/Users/esammer/.m2/repository/org/mortbay/jetty/jetty/6.1.26/jetty-6.1.26.jar:/Users/esammer/.m2/repository/com/typesafe/config/1.0.2/config-1.0.2.jar:/Users/esammer/.m2/repository/org/restlet/jee/org.restlet.ext.servlet/2.1.1/org.restlet.ext.servlet-2.1.1.jar:/Users/esammer/.m2/repository/org/glassfish/external/management-api/3.0.0-b012/management-api-3.0.0-b012.jar:/Users/esammer/.m2/repository/com/spatial4j/spatial4j/0.3/spatial4j-0.3.jar:/Users/esammer/.m2/repository/log4j/log4j/1.2.16/log4j-1.2.16.jar:/Users/esammer/.m2/repository/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar:/Users/esammer/.m2/repository/org/codehaus/plexus/plexus-classworlds/2.2.3/plexus-classworlds-2.2.3.jar:/Users/esammer/.m2/repository/org/apache/avro/avro-ipc/1.7.4/avro-ipc-1.7.4-tests.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-exec/0.10.0-cdh4.3.0/hive-exec-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/com/googlecode/juniversalchardet/juniversalchardet/1.0.3/juniversalchardet-1.0.3.jar:/Users/esammer/.m2/repository/org/sonatype/aether/aether-spi/1.7/aether-spi-1.7.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-settings/2.0.6/maven-settings-2.0.6.jar:/Users/esammer/.m2/repository/com/sun/jersey/jersey-test-framework/jersey-test-framework-core/1.8/jersey-test-framework-core-1.8.jar:/Users/esammer/.m2/repository/org/apache/maven/wagon/wagon-provider-api/1.0-beta-2/wagon-provider-api-1.0-beta-2.jar:/Users/esammer/.m2/repository/commons-fileupload/commons-fileupload/1.2.1/commons-fileupload-1.2.1.jar:/Users/esammer/.m2/repository/org/slf4j/jcl-over-slf4j/1.6.1/jcl-over-slf4j-1.6.1.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-server-tests/2.0.0-cdh4.3.0/hadoop-yarn-server-tests-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-server-resourcemanager/2.0.0-cdh4.3.0/hadoop-yarn-server-resourcemanager-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/commons-el/commons-el/1.0/commons-el-1.0.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-core/4.4.0/lucene-core-4.4.0.jar:/Users/esammer/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/esammer/.m2/repository/org/apache/pdfbox/jempbox/1.8.1/jempbox-1.8.1.jar:/Users/esammer/.m2/repository/org/bouncycastle/bcmail-jdk15/1.45/bcmail-jdk15-1.45.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-server-nodemanager/2.0.0-cdh4.3.0/hadoop-yarn-server-nodemanager-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/avro/trevni-core/1.7.4/trevni-core-1.7.4.jar:/Users/esammer/.m2/repository/org/jboss/netty/netty/3.2.4.Final/netty-3.2.4.Final.jar:/Users/esammer/.m2/repository/commons-beanutils/commons-beanutils-core/1.8.0/commons-beanutils-core-1.8.0.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-tika-decompress/0.6.0/cdk-morphlines-tika-decompress-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-cli/0.10.0-cdh4.3.0/hive-cli-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.1/maven-plugin-annotations-3.1.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-core/0.6.0/cdk-morphlines-core-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/flume/flume-ng-configuration/1.3.0-cdh4.3.0/flume-ng-configuration-1.3.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/de/l3s/boilerpipe/boilerpipe/1.1.0/boilerpipe-1.1.0.jar:/Users/esammer/.m2/repository/org/apache/thrift/libfb303/0.9.0/libfb303-0.9.0.jar:/Users/esammer/.m2/repository/com/googlecode/mp4parser/isoparser/1.0-RC-1/isoparser-1.0-RC-1.jar:/Users/esammer/.m2/repository/org/apache/avro/avro-mapred/1.7.4/avro-mapred-1.7.4-hadoop2.jar:/Users/esammer/.m2/repository/org/apache/pdfbox/pdfbox/1.8.1/pdfbox-1.8.1.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-service/0.10.0-cdh4.3.0/hive-service-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jaxb-impl-2.2.3-1.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-memory/4.4.0/lucene-memory-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-jobclient/2.0.0-cdh4.3.0/hadoop-mapreduce-client-jobclient-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/commons-io/commons-io/2.1/commons-io-2.1.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-saxon/0.6.0/cdk-morphlines-saxon-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/solr/solr-cell/4.4.0/solr-cell-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-archives/2.0.0-cdh4.3.0/hadoop-archives-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/xmlbeans/xmlbeans/2.3.0/xmlbeans-2.3.0.jar:/Users/esammer/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar:/Users/esammer/.m2/repository/org/apache/avro/avro/1.7.4/avro-1.7.4.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-contrib/0.10.0-cdh4.3.0/hive-contrib-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/hsqldb/hsqldb/1.8.0.10/hsqldb-1.8.0.10.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-settings-builder/3.0/maven-settings-builder-3.0.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-shims/0.10.0-cdh4.3.0/hive-shims-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/json/json/20090211/json-20090211.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-plugin-registry/2.0.6/maven-plugin-registry-2.0.6.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-core/2.0.0-cdh4.3.0/hadoop-mapreduce-client-core-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/sonatype/aether/aether-util/1.7/aether-util-1.7.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-app/2.0.0-cdh4.3.0/hadoop-mapreduce-client-app-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/datanucleus/datanucleus-connectionpool/2.0.3/datanucleus-connectionpool-2.0.3.jar:/Users/esammer/.m2/repository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-http-server/2.1.1/grizzly-http-server-2.1.1.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-framework/2.1.1/grizzly-framework-2.1.1-tests.jar:/Users/esammer/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-client/2.0.0-mr1-cdh4.3.0/hadoop-client-2.0.0-mr1-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/zookeeper/zookeeper/3.4.5-cdh4.3.0/zookeeper-3.4.5-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/gagravarr/vorbis-java-tika/0.1/vorbis-java-tika-0.1.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-http-servlet/2.1.1/grizzly-http-servlet-2.1.1.jar:/Users/esammer/.m2/repository/com/google/inject/guice/3.0/guice-3.0.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-twitter/0.6.0/cdk-morphlines-twitter-0.6.0.jar:/Users/esammer/.m2/repository/org/datanucleus/datanucleus-rdbms/2.0.3/datanucleus-rdbms-2.0.3.jar:/Users/esammer/.m2/repository/com/twitter/parquet-format/1.0.0/parquet-format-1.0.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-annotations/2.0.5-alpha/hadoop-annotations-2.0.5-alpha.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-analyzers-kuromoji/4.4.0/lucene-analyzers-kuromoji-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/thrift/libthrift/0.9.0/libthrift-0.9.0.jar:/Users/esammer/.m2/repository/xerces/xercesImpl/2.10.0/xercesImpl-2.10.0.jar:/Users/esammer/.m2/repository/com/google/inject/extensions/guice-servlet/3.0/guice-servlet-3.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-model/2.0.6/maven-model-2.0.6.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-hadoop-sequencefile/0.6.0/cdk-morphlines-hadoop-sequencefile-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-suggest/4.4.0/lucene-suggest-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-profile/2.0.6/maven-profile-2.0.6.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-avro/0.6.0/cdk-morphlines-avro-0.6.0.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-json/0.6.0/cdk-morphlines-json-0.6.0.jar:/Users/esammer/.m2/repository/org/sonatype/sisu/sisu-guice/2.1.7/sisu-guice-2.1.7-noaop.jar:/Users/esammer/.m2/repository/javax/jdo/jdo2-api/2.3-ec/jdo2-api-2.3-ec.jar:/Users/esammer/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:/Users/esammer/.m2/repository/org/apache/mina/mina-core/2.0.4/mina-core-2.0.4.jar:/Users/esammer/.m2/repository/org/apache/tika/tika-parsers/1.4/tika-parsers-1.4.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-http/2.1.1/grizzly-http-2.1.1.jar:/Users/esammer/.m2/repository/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar:/Users/esammer/.m2/repository/com/twitter/parquet-avro/1.0.0/parquet-avro-1.0.0.jar:/Users/esammer/.m2/repository/com/sun/jersey/contribs/jersey-guice/1.8/jersey-guice-1.8.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.4.0/lucene-analyzers-common-4.4.0.jar:/Users/esammer/.m2/repository/org/slf4j/slf4j-log4j12/1.6.1/slf4j-log4j12-1.6.1.jar:/Users/esammer/.m2/repository/com/jcraft/jsch/0.1.42/jsch-0.1.42.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-codecs/4.4.0/lucene-codecs-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/flume/flume-ng-sdk/1.3.0-cdh4.3.0/flume-ng-sdk-1.3.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-misc/4.4.0/lucene-misc-4.4.0.jar:/Users/esammer/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/Users/esammer/.m2/repository/org/apache/solr/solr-solrj/4.4.0/solr-solrj-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-common/2.0.5-alpha/hadoop-common-2.0.5-alpha.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-data-core/0.6.0/cdk-data-core-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-common/2.0.0-cdh4.3.0/hadoop-mapreduce-client-common-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/commons/commons-math/2.1/commons-math-2.1.jar:/Users/esammer/.m2/repository/org/apache/httpcomponents/httpcore/4.2.2/httpcore-4.2.2.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-model-builder/3.0/maven-model-builder-3.0.jar:/Users/esammer/.m2/repository/org/apache/poi/poi/3.9/poi-3.9.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-project/2.0.6/maven-project-2.0.6.jar:/Users/esammer/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.2.1/jackson-annotations-2.2.1.jar:/Users/esammer/.m2/repository/org/sonatype/sisu/sisu-inject-bean/1.4.2/sisu-inject-bean-1.4.2.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-shuffle/2.0.0-cdh4.3.0/hadoop-mapreduce-client-shuffle-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-core/2.0.0-mr1-cdh4.3.0/hadoop-core-2.0.0-mr1-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/tukaani/xz/1.0/xz-1.0.jar:/Users/esammer/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/Users/esammer/.m2/repository/com/twitter/parquet-hadoop/1.0.0/parquet-hadoop-1.0.0.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-solr-core/0.6.0/cdk-morphlines-solr-core-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-highlighter/4.4.0/lucene-highlighter-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-artifact-manager/2.0.6/maven-artifact-manager-2.0.6.jar:/Users/esammer/.m2/repository/org/apache/commons/commons-compress/1.4.1/commons-compress-1.4.1.jar:/Users/esammer/.m2/repository/org/bouncycastle/bcprov-jdk15/1.45/bcprov-jdk15-1.45.jar:/Users/esammer/.m2/repository/org/codehaus/plexus/plexus-interpolation/1.14/plexus-interpolation-1.14.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-queryparser/4.4.0/lucene-queryparser-4.4.0.jar:/Users/esammer/.m2/repository/io/netty/netty/3.4.0.Final/netty-3.4.0.Final.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-grouping/4.4.0/lucene-grouping-4.4.0.jar:/Users/esammer/.m2/repository/org/apache/avro/avro-mapred/1.7.4/avro-mapred-1.7.4.jar:/Users/esammer/.m2/repository/org/sonatype/sisu/sisu-inject-plexus/1.4.2/sisu-inject-plexus-1.4.2.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-analyzers-phonetic/4.4.0/lucene-analyzers-phonetic-4.4.0.jar:/Users/esammer/.m2/repository/com/drewnoakes/metadata-extractor/2.6.2/metadata-extractor-2.6.2.jar:/Users/esammer/.m2/repository/javax/transaction/jta/1.1/jta-1.1.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-common/0.10.0-cdh4.3.0/hive-common-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/com/google/code/gson/gson/2.2.2/gson-2.2.2.jar:/Users/esammer/.m2/repository/org/datanucleus/datanucleus-enhancer/2.0.3/datanucleus-enhancer-2.0.3.jar:/Users/esammer/.m2/repository/org/apache/james/apache-mime4j-core/0.7.2/apache-mime4j-core-0.7.2.jar:/Users/esammer/.m2/repository/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar:/Users/esammer/.m2/repository/com/sun/jersey/jersey-grizzly2/1.8/jersey-grizzly2-1.8.jar:/Users/esammer/.m2/repository/org/apache/poi/poi-ooxml/3.9/poi-ooxml-3.9.jar:/Users/esammer/.m2/repository/org/mortbay/jetty/servlet-api/2.5-20110124/servlet-api-2.5-20110124.jar:/Users/esammer/.m2/repository/org/apache/pdfbox/fontbox/1.8.1/fontbox-1.8.1.jar:/Users/esammer/.m2/repository/org/apache/avro/avro-ipc/1.7.4/avro-ipc-1.7.4.jar:/Users/esammer/.m2/repository/rome/rome/0.9/rome-0.9.jar:/Users/esammer/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/Users/esammer/.m2/repository/com/sun/jersey/jersey-test-framework/jersey-test-framework-grizzly2/1.8/jersey-test-framework-grizzly2-1.8.jar:/Users/esammer/.m2/repository/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.jar:/Users/esammer/.m2/repository/xmlenc/xmlenc/0.52/xmlenc-0.52.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-server-web-proxy/2.0.0-cdh4.3.0/hadoop-yarn-server-web-proxy-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar:/Users/esammer/.m2/repository/org/restlet/jee/org.restlet/2.1.1/org.restlet-2.1.1.jar:/Users/esammer/.m2/repository/org/glassfish/javax.servlet/3.0/javax.servlet-3.0.jar:/Users/esammer/.m2/repository/org/mortbay/jetty/jetty-util/6.1.26/jetty-util-6.1.26.jar:/Users/esammer/.m2/repository/org/slf4j/slf4j-api/1.6.1/slf4j-api-1.6.1.jar:/Users/esammer/.m2/repository/org/codehaus/jackson/jackson-xc/1.7.1/jackson-xc-1.7.1.jar:/Users/esammer/.m2/repository/org/twdata/maven/mojo-executor/1.5/mojo-executor-1.5.jar:/Users/esammer/.m2/repository/org/apache/flume/flume-ng-core/1.3.0-cdh4.3.0/flume-ng-core-1.3.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/apache/derby/derby/10.6.1.0/derby-10.6.1.0.jar:/Users/esammer/.m2/repository/org/apache/hive/hive-metastore/0.10.0-cdh4.3.0/hive-metastore-0.10.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/org/glassfish/grizzly/grizzly-framework/2.1.1/grizzly-framework-2.1.1.jar:/Users/esammer/.m2/repository/org/mockito/mockito-all/1.8.5/mockito-all-1.8.5.jar:/Users/esammer/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-yarn-api/2.0.0-cdh4.3.0/hadoop-yarn-api-2.0.0-cdh4.3.0.jar:/Users/esammer/.m2/repository/com/google/code/findbugs/annotations/2.0.1/annotations-2.0.1.jar:/Users/esammer/.m2/repository/com/thoughtworks/paranamer/paranamer/2.3/paranamer-2.3.jar:/Users/esammer/.m2/repository/org/apache/maven/maven-artifact/2.0.6/maven-artifact-2.0.6.jar:/Users/esammer/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.8.8/jackson-mapper-asl-1.8.8.jar:/Users/esammer/.m2/repository/com/googlecode/json-simple/json-simple/1.1/json-simple-1.1.jar:/Users/esammer/.m2/repository/commons-digester/commons-digester/1.8/commons-digester-1.8.jar:/Users/esammer/.m2/repository/edu/ucar/netcdf/4.2-min/netcdf-4.2-min.jar:/Users/esammer/.m2/repository/com/cloudera/cdk/cdk-morphlines-solr-cell/0.6.0/cdk-morphlines-solr-cell-0.6.0.jar:/Users/esammer/.m2/repository/org/apache/lucene/lucene-queries/4.4.0/lucene-queries-4.4.0.jar:/Users/esammer/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar:/Users/esammer/.m2/repository/org/glassfish/gmbal/gmbal-api-only/3.0.0-b023/gmbal-api-only-3.0.0-b023.jar:/Users/esammer/.m2/repository/org/apache/hadoop/hadoop-auth/2.0.5-alpha/hadoop-auth-2.0.5-alpha.jar:/Users/esammer/.m2/repository/org/javassist/javassist/3.16.1-GA/javassist-3.16.1-GA.jar:/Users/esammer/.m2/repository/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar:/Users/esammer/.m2/repository/org/sonatype/aether/aether-api/1.7/aether-api-1.7.jar:/Users/esammer/.m2/repository/org/apache/oozie/oozie-client/3.3.2-cdh4.3.0/oozie-client-3.3.2-cdh4.3.0.jar:/Users/esammer/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/Users/esammer/.m2/repository/org/apache/crunch/crunch-core/0.7.0-hadoop2/crunch-core-0.7.0-hadoop2.jar:/Users/esammer/.m2/repository/com/codahale/metrics/metrics-core/3.0.1/metrics-core-3.0.1.jar:/Users/esammer/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.2.1/jackson-databind-2.2.1.jar:/Users/esammer/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.2.1/jackson-core-2.2.1.jar:/Users/esammer/.m2/repository/org/apache/commons/commons-jexl/2.1.1/commons-jexl-2.1.1.jar:/Users/esammer/.m2/repository/asm/asm/3.2/asm-3.2.jar -encoding UTF-8 -protected -sourcepath /Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-core/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-core/target/generated-sources/avro:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-core/src/main/javadoc:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-crunch/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-flume/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-data/cdk-data-hcatalog/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-flume-avro-event-serializer/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-maven-plugin/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-tools/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-core/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-avro/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-json/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-saxon/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-tika-core/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-tika-decompress/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-twitter/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-hadoop-sequencefile/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-solr-core/src/main/java:/Users/esammer/Documents/Code/cdk/target/checkout/cdk-morphlines/cdk-morphlines-solr-cell/src/main/java -apiname CDK 0.6.0 -->
<package name="com.cloudera.cdk.data">
  <!-- start interface com.cloudera.cdk.data.Dataset -->
  <interface name="Dataset"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the name of a {@code Dataset}. No guarantees about the format of this
 name are made.]]>
      </doc>
    </method>
    <method name="getDescriptor" return="com.cloudera.cdk.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the {@link DatasetDescriptor} associated with this dataset.]]>
      </doc>
    </method>
    <method name="getPartition" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="com.cloudera.cdk.data.PartitionKey"/>
      <param name="autoCreate" type="boolean"/>
      <doc>
      <![CDATA[Get a partition for a {@link PartitionKey}, possibly creating the partition
 if it doesn't already exist. A {@link PartitionKey} may be obtained using
 {@link PartitionStrategy#partitionKey(Object...)} or
 {@link PartitionStrategy#partitionKeyForEntity(Object)}.

 @param key        The key used to look up the partition.
 @param autoCreate If true, automatically create the partition if doesn't exist,
 @throws DatasetException]]>
      </doc>
    </method>
    <method name="dropPartition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="com.cloudera.cdk.data.PartitionKey"/>
      <doc>
      <![CDATA[Drop a partition for a {@link PartitionKey}. Dropping a partition that
 doesn't exist results in a {@link DatasetException} being thrown.

 @param key The key used to look up the partition.
 @throws DatasetException
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="getWriter" return="com.cloudera.cdk.data.DatasetWriter&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get an appropriate {@link DatasetWriter} implementation based on the
 underlying {@code Dataset} implementation.
 </p>
 <p>
 Implementations are free to return different types of writers depending on
 the disposition of the data. For example, a partitioned dataset may use a
 different writer than that of a non-partitioned dataset. Clients should not
 make any assumptions about the returned implementations. {@link Dataset}
 implementations are free to change them at any time.
 </p>

 @throws DatasetException]]>
      </doc>
    </method>
    <method name="getReader" return="com.cloudera.cdk.data.DatasetReader&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get an appropriate {@link DatasetReader} implementation based on the
 underlying {@code Dataset} implementation.
 </p>
 <p>
 Implementations are free to return different types of readers depending on
 the disposition of the data. For example, a partitioned dataset may use a
 different reader than that of a non-partitioned dataset. Clients should not
 make any assumptions about the returned implementations. {@code Dataset}
 implementations are free to change them at any time.
 </p>

 @throws DatasetException]]>
      </doc>
    </method>
    <method name="getPartitions" return="java.lang.Iterable&lt;com.cloudera.cdk.data.Dataset&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Return partitions, if this dataset is partitioned.
 </p>
 <p>
 Note that, depending on the implementation, the returned iterable may hold
 system resources until exhausted and/or finalized.
 </p>

 @return an iterable over all partitions of this dataset
 @throws DatasetException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A logical representation of a set of data entities.
 </p>
 <p>
 Logically, all datasets have two generic properties: a name, and a descriptor
 that holds information such as the dataset's schema and its partitioning
 information. Concrete implementations of {@code Dataset} may support
 additional properties, mandatory or otherwise, as needed. {@code Dataset}s
 are not normally instantiated directly, but managed by a repository (also
 implementation-specific).
 </p>
 <p>
 Implementations of {@link Dataset} are immutable.
 </p>

 @see DatasetRepository
 @see DatasetWriter
 @see DatasetReader
 @see PartitionStrategy
 @see DatasetDescriptor
 @see Schema]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.data.Dataset -->
  <!-- start class com.cloudera.cdk.data.DatasetDescriptor -->
  <class name="DatasetDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetDescriptor" type="org.apache.avro.Schema, com.cloudera.cdk.data.PartitionStrategy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an instance of this class with the supplied {@link Schema},
 and optional {@link PartitionStrategy}. The default {@link Format},
 {@link Formats#AVRO}, will be used.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.avro.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the associated {@link Schema}. Depending on the underlying storage
 system, this schema may be simple (i.e. records made up of only scalar
 types) or complex (i.e. containing other records, lists, and so on).
 Validation of the supported schemas is performed by the managing
 repository, not the dataset or descriptor itself.

 @return the schema]]>
      </doc>
    </method>
    <method name="getSchemaUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a URL from which the {@link Schema} may be retrieved. Optional. This method
 may return <code>null</code> if the schema is not stored at a persistent URL,
 e.g. if it was constructed from a literal string.

 @return a URL from which the schema may be retrieved
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="getFormat" return="com.cloudera.cdk.data.Format"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the associated {@link Format} that the data is stored in.

 @return the format
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="getPartitionStrategy" return="com.cloudera.cdk.data.PartitionStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the {@link PartitionStrategy}, if this dataset is partitioned. Calling
 this method on a non-partitioned dataset is an error. Instead, use the
 {@link #isPartitioned()} method prior to invocation.]]>
      </doc>
    </method>
    <method name="isPartitioned" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if an associated dataset is partitioned (that is, has an
 associated {@link PartitionStrategy}, false otherwise.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The structural definition of a {@link Dataset}.
 </p>
 <p>
 Each {@code Dataset} has an associated {@link Schema} and optional
 {@link PartitionStrategy} defined at the time of creation. Instances of this
 class are used to hold this information. Users are strongly encouraged to use
 the inner {@link Builder} to create new instances.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetDescriptor -->
  <!-- start class com.cloudera.cdk.data.DatasetDescriptor.Builder -->
  <class name="DatasetDescriptor.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.cdk.data.DatasetDescriptor&gt;"/>
    <constructor name="DatasetDescriptor.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.avro.Schema"/>
      <doc>
      <![CDATA[Configure the dataset's schema. A schema is required, and may be set
 using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link File}. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from an {@link InputStream}. It is the
 caller's responsibility to close the {@link InputStream}. A schema is
 required, and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link URI}. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link String}. A schema is
 required, and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Configure the dataset's schema via a Java class type. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. A schema is required, and may be set using one of the
 <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. It is the caller's responsibility to close the
 {@link InputStream}. A schema is required, and may be set using one of
 the <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. A schema is required, and may be set using one of the
 <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="format" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="com.cloudera.cdk.data.Format"/>
      <doc>
      <![CDATA[Configure the dataset's format. Optional. If not specified {@link Formats#AVRO}
 is used by default.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="partitionStrategy" return="com.cloudera.cdk.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="partitionStrategy" type="com.cloudera.cdk.data.PartitionStrategy"/>
      <doc>
      <![CDATA[Configure the dataset's partitioning strategy. Optional.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.cdk.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get an instance of the configured dataset descriptor. Subsequent calls
 will produce new instances that are similarly configure.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link DatasetDescriptor}s.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetDescriptor.Builder -->
  <!-- start class com.cloudera.cdk.data.DatasetException -->
  <class name="DatasetException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset-related failures.
 </p>
 <p>
 Implementations of the {@link Dataset} interface throw this exception if
 any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see Dataset
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetException -->
  <!-- start interface com.cloudera.cdk.data.DatasetReader -->
  <interface name="DatasetReader"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="open"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Open the reader, allocating any necessary resources required to produce
 entities.
 </p>
 <p>
 This method <strong>must</strong> be invoked prior to any calls of
 {@link #hasNext()} or {@link #read()}.
 </p>

 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tests the reader to see if additional entities can be read.

 @return true if additional entities exist, false otherwise.
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="read" return="E"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Fetch the next entity from the reader.
 </p>
 <p>
 Calling this method when no additional data exists is illegal; users should
 use {@link #hasNext()} to test if a call to {@code read()} will succeed.
 Implementations of this method may block.
 </p>

 @return An entity of type {@code E}.
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Close the reader and release any system resources.
 </p>
 <p>
 No further operations of this interface (other than additional calls of
 this method) may be performed, however implementations may choose to permit
 other method calls. See implementation documentation for details.
 </p>

 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A stream-oriented dataset reader.
 </p>
 <p>
 Subsystem-specific implementations of this interface are used to read data
 from a {@link Dataset}. Readers are use-once objects that produce entities of
 type {@code E}. Normally, users are not expected to instantiate
 implementations directly. Instead, use the containing dataset's
 {@link Dataset#getReader()} method to get an appropriate implementation.
 Normally, users receive an instance of this interface from a dataset, call
 {@link #open()} to prepare for IO operations, invoke {@link #hasNext()} and
 {@link #read()} as necessary, and {@link #close()} when they are done or no
 more data exists.
 </p>
 <p>
 Implementations may hold system resources until the {@link #close()} method
 is called, so users <strong>must</strong> follow the normal try / finally
 pattern to ensure these resources are properly freed when the reader is
 exhausted or no longer useful. Do not rely on implementations automatically
 invoking the {@code close()} method upon object finalization (although
 implementations are free to do so, if they choose). All implementations must
 silently ignore multiple invocations of {@code close()} as well as a close of
 an unopened reader.
 </p>
 <p>
 If any method throws an exception, the reader is no longer valid, and the
 only method that may be subsequently called is {@code close()}.
 </p>
 <p>
 Implementations of {@link DatasetReader} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>

 @param <E> The type of entity produced by this reader.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.data.DatasetReader -->
  <!-- start class com.cloudera.cdk.data.DatasetReaderException -->
  <class name="DatasetReaderException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetReaderException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset reader-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetReader} interface throw this exception
 if any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see DatasetReader
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetReaderException -->
  <!-- start interface com.cloudera.cdk.data.DatasetRepository -->
  <interface name="DatasetRepository"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Get the latest version of a named {@link Dataset}. If no dataset with the
 provided {@code name} exists, a {@link DatasetRepositoryException} is thrown.

 @param name The name of the dataset.
 @throws DatasetRepositoryException]]>
      </doc>
    </method>
    <method name="create" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Create a {@link Dataset} with the supplied {@code descriptor}. Depending on
 the underlying dataset storage, some schemas types or configurations may
 not be supported. If an illegal schema is supplied, an exception will be
 thrown by the implementing class. It is illegal to create a more than one
 dataset with a given name. If a duplicate name is provided, an exception is
 thrown.

 @param name       The fully qualified dataset name
 @param descriptor A descriptor that describes the schema and other properties of the
                   dataset
 @return The newly created dataset
 @throws DatasetRepositoryException]]>
      </doc>
    </method>
    <method name="update" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Update an existing {@link Dataset} to reflect the supplied {@code descriptor}. The
 common case is updating a dataset schema. Depending on
 the underlying dataset storage, some updates may not be supported,
 such as a change in format or partition strategy.
 Any attempt to make an unsupported or incompatible update will result in an
 exception being thrown and no change being made to the dataset.

 @param name       The fully qualified dataset name
 @param descriptor A descriptor that describes the schema and other properties of the
                   dataset
 @return The newly created dataset
 @throws DatasetRepositoryException
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Drop the named {@link Dataset}. If no dataset with the
 provided {@code name} exists, a {@link DatasetReaderException} is thrown.

 @param name The name of the dataset.
 @return <code>true</code> if the dataset was successfully dropped, false otherwise
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A logical repository (storage system) of {@link Dataset}s.
 </p>
 <p>
 Implementations of {@code DatasetRepository} are storage systems that contain
 zero or more {@link Dataset}s. A repository acts as a factory, as well as a
 registry, of datasets. Users can {@link #create(String, DatasetDescriptor)} a
 new {@link Dataset} with a name and schema, or retrieve a handle to an
 existing dataset, by name, by way of the {@link #get(String)} method. While
 not expressly forbidden, most repositories are expected to support only a
 single concrete {@link Dataset} implementation.
 </p>
 <p>
 No guarantees are made as to the durability, reliability, or availability of
 the underlying storage. That is, a {@code DatasetRepository} could be on
 disk, in memory, or some combination. See the implementation class for
 details about the guarantees it provides.
 </p>
 <p>
 Implementations of {@link DatasetRepository} are immutable.
 </p>

 @see Dataset
 @see DatasetDescriptor]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.data.DatasetRepository -->
  <!-- start class com.cloudera.cdk.data.DatasetRepositoryException -->
  <class name="DatasetRepositoryException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetRepositoryException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset repository-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetRepository} interface throw this
 exception if any of their operations fail. This is a runtime (unchecked)
 exception.
 </p>

 @see DatasetRepository
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetRepositoryException -->
  <!-- start interface com.cloudera.cdk.data.DatasetWriter -->
  <interface name="DatasetWriter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="open"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Open the writer, allocating any necessary resources required to store
 entities.
 </p>
 <p>
 This method <strong>must</strong> be invoked prior to any calls of
 {@link #write(Object)} or {@link #flush()}.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="E"/>
      <doc>
      <![CDATA[<p>
 Writer an entity of type {@code E} to the associated dataset.
 </p>
 <p>
 Implementations may buffer entities internally (see the {@link #flush()}
 method). All instances of {@code entity} must conform to the dataset's
 schema and partition. If they don't, implementations should throw an exception,
 although this is not required.
 </p>

 @param entity The entity to write
 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Force or commit any outstanding data to storage.
 </p>
 </p>
 <p>
 Implementations of this interface must declare their durability guarantees.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Close the writer and release any system resources.
 </p>
 <p>
 No further operations of this interface (other than additional calls to
 this method) may be performed, however implementations may choose to permit
 other method calls. See implementation documentation for details.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A stream-oriented dataset writer.
 </p>
 <p>
 Subsystem-specific implementations of this interface are used to write data
 to a {@link Dataset}. Writers are use-once objects that serialize entities of
 type {@code E} and write them to the underlying system. Normally, users are
 not expected to instantiate implementations directly. Instead, use the
 containing dataset's {@link Dataset#getWriter()} method to get an appropriate
 implementation. Users should receive an instance of this interface from a
 dataset, call {@link #open()} to prepare for IO operations, invoke
 {@link #write(Object)} and {@link #flush()} as necessary, and
 {@link #close()} when they are done, or no more data exists.
 </p>
 <p>
 Implementations may hold system resources until the {@link #close()} method
 is called, so users <strong>must</strong> follow the normal try / finally
 pattern to ensure these resources are properly freed when the writer is no
 longer needed. Do not rely on implementations automatically invoking the
 {@code close()} method upon object finalization (implementations must not do
 so). All implementations must silently ignore multiple invocations of
 {@code close()} as well as a close of an unopened writer.
 </p>
 <p>
 If any method throws an exception, the writer is no longer valid, and the
 only method that may be subsequently called is {@code close()}.
 </p>
 <p>
 Implementations of {@link DatasetWriter} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>

 @param <E> The type of entity accepted by this writer.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.data.DatasetWriter -->
  <!-- start class com.cloudera.cdk.data.DatasetWriterException -->
  <class name="DatasetWriterException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetWriterException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset writer-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetWriter} interface throw this exception
 if any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see DatasetWriter
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.DatasetWriterException -->
  <!-- start class com.cloudera.cdk.data.FieldPartitioner -->
  <class name="FieldPartitioner" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Function&lt;java.lang.Object, java.lang.Object&gt;"/>
    <constructor name="FieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <constructor name="FieldPartitioner" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the partition field. Note that the partition field is derived
 from {@link #getSourceName()} and does not appear in the dataset entity.]]>
      </doc>
    </method>
    <method name="getSourceName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the field from which the partition field is derived.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="getCardinality" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of buckets in the partition.]]>
      </doc>
    </method>
    <method name="apply" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[<p>
 Apply the partition function to the given {@code value}.
 </p>
 <p>
 The type of value must be compatible with the field partitioner
 implementation. Normally, this is validated at the time of initial
 configuration rather than at runtime.
 </p>]]>
      </doc>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
      <doc>
      <![CDATA[<p>
 Retrieve the value for the field from the string representation.
 </p>
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="valueToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[<p>
 Retrieve the value for the field formatted as a {@link String}. By default,
 this is the object's {@link Object#toString()} representation,
 but some {@link FieldPartitioner}s may choose to provide a different representation.
 </p>
 @since 0.4.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 Partitions values for a named field.
 </p>
 <p>
 Used by a {@link PartitionStrategy} to calculate which partition an entity
 belongs in, based on the value of a given field, called the source field. A field
 partitioner can, in some cases, provide meaningful cardinality hints to query
 systems. A good example of this is a hash partitioner which always knows the number of
 buckets produced by the function.
 </p>
 <p>
 Implementations of {@link FieldPartitioner} are immutable.
 </p>
 
 @see PartitionStrategy]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.FieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.Format -->
  <class name="Format" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the format's name.
 @return the name]]>
      </doc>
    </method>
    <method name="getExtension" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the extension for use in filenames. A dot is not included as a part of the
 extension.
 @return the extension]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The data format used for encoding the data in a {@link Dataset} when stored in a
 {@link DatasetRepository}.
 </p>
 <p>
 There are a small number of formats provided, the default is {@link Formats#AVRO},
 which will be used when no format is explicitly configured.
 </p>

 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.Format -->
  <!-- start class com.cloudera.cdk.data.Formats -->
  <class name="Formats" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="AVRO" type="com.cloudera.cdk.data.Format"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[AVRO: the
 <a href="http://avro.apache.org/docs/current/spec.html#Object+Container+Files">Avro
 row-oriented format</a>]]>
      </doc>
    </field>
    <field name="PARQUET" type="com.cloudera.cdk.data.Format"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PARQUET: the <a href="http://parquet.io/">Parquet columnar format</a>]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<p>
 Contains constant definitions for the standard {@link Format} instances supported
 by the library. {@link #AVRO} is the default format.
 </p>

 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.Formats -->
  <!-- start interface com.cloudera.cdk.data.MetadataProvider -->
  <interface name="MetadataProvider"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="load" return="com.cloudera.cdk.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Load the dataset descriptor for the dataset {@code name}.

 @param name The fully qualified name of an existing dataset.
 @return A dataset descriptor.
 @throws MetadataProviderException If the dataset doesn't exist or the descriptor can not be loaded.]]>
      </doc>
    </method>
    <method name="save"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Save the dataset descriptor for the dataset {@code name}.

 @param name       The fully qualified name of a dataset.
 @param descriptor A dataset descriptor.
 @throws MetadataProviderException If the dataset descriptor can not be saved.]]>
      </doc>
    </method>
    <method name="delete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Delete all metadata associated with the dataset named {@code name}.

 @param name The fully qualified name of a dataset.
 @return True if the dataset is successfully deleted, false if the dataset
         doesn't exist.
 @throws MetadataProviderException If the dataset metadata exists but can not be deleted.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 Defines a service provider interface for metadata system plugins.
 </p>
 <p>
 Implementations of {@link DatasetRepository} are written against this
 interface and, by extension, can store dataset metadata information contained
 in the {@link DatasetDescriptor} in a system of the user's choosing.
 </p>
 <p>
 Implementations of {@link MetadataProvider} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.data.MetadataProvider -->
  <!-- start class com.cloudera.cdk.data.MetadataProviderException -->
  <class name="MetadataProviderException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MetadataProviderException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for metadata provider-related failures.
 </p>
 <p>
 Implementations of the {@link MetadataProvider} interface throw this
 exception if any of their operations fail. This is a runtime (unchecked)
 exception.
 </p>

 @see MetadataProvider
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.MetadataProviderException -->
  <!-- start class com.cloudera.cdk.data.PartitionKey -->
  <class name="PartitionKey" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getValues" return="java.util.List&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Return the value at the specified index in the key.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the number of values in the key.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A key for retrieving partitions from a {@link Dataset}.
 </p>
 <p>
 A {@code PartitionKey} is a ordered sequence of values corresponding to the
 {@link FieldPartitioner}s in a {@link PartitionStrategy}. A
 {@link PartitionKey} may be obtained using
 {@link PartitionStrategy#partitionKey(Object...)} or
 {@link PartitionStrategy#partitionKeyForEntity(Object)}.
 </p>
 <p>
 Implementations of {@link PartitionKey} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>
 
 @see PartitionStrategy
 @see FieldPartitioner
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.PartitionKey -->
  <!-- start class com.cloudera.cdk.data.PartitionStrategy -->
  <class name="PartitionStrategy" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PartitionStrategy" type="com.cloudera.cdk.data.FieldPartitioner[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a partition strategy with a variadic array of field partitioners.]]>
      </doc>
    </constructor>
    <constructor name="PartitionStrategy" type="java.util.List&lt;com.cloudera.cdk.data.FieldPartitioner&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a partition strategy with a list of field partitioners.]]>
      </doc>
    </constructor>
    <method name="getFieldPartitioners" return="java.util.List&lt;com.cloudera.cdk.data.FieldPartitioner&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get the list of field partitioners used for partitioning.
 </p>
 <p>
 {@link FieldPartitioner}s are returned in the same order they are used
 during partition selection.
 </p>]]>
      </doc>
    </method>
    <method name="getCardinality" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Return the cardinality produced by the contained field partitioners.
 </p>
 <p>
 This can be used to aid in calculating resource usage used during certain
 operations. For example, when writing data to a partitioned dataset, this
 method can be used to estimate (or discover exactly, depending on the
 partition functions) how many leaf partitions exist.
 </p>
 <p>
 <strong>Warning:</strong> This method is allowed to lie and should be
 treated only as a hint. Some partition functions are fixed (e.g. hash
 modulo number of buckets), while others are open-ended (e.g. discrete
 value) and depend on the input data.
 </p>
 
 @return The estimated (or possibly concrete) number of leaf partitions.]]>
      </doc>
    </method>
    <method name="partitionKey" return="com.cloudera.cdk.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key with a variadic array of values corresponding to
 the field partitioners in this partition strategy.
 </p>
 <p>
 It is permitted to have fewer values than field partitioners, in which case
 all subpartititions in the unspecified parts of the key are matched by the
 key.
 </p>
 <p>
 Null values are not permitted.
 </p>]]>
      </doc>
    </method>
    <method name="partitionKeyForEntity" return="com.cloudera.cdk.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="java.lang.Object"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key for the given entity.
 </p>
 <p>
 This is a convenient way to find the partition that a given entity would be
 written to, or to find a partition using objects from the entity domain.
 </p>]]>
      </doc>
    </method>
    <method name="partitionKeyForEntity" return="com.cloudera.cdk.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="java.lang.Object"/>
      <param name="reuseKey" type="com.cloudera.cdk.data.PartitionKey"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key for the given entity, reusing the supplied key if not
 null.
 </p>
 <p>
 This is a convenient way to find the partition that a given entity would be
 written to, or to find a partition using objects from the entity domain.
 </p>]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The strategy used to determine how a dataset is partitioned.
 </p>
 <p>
 A {@code PartitionStrategy} is configured with one or more
 {@link FieldPartitioner}s upon creation. When a {@link Dataset} is configured
 with a partition strategy, we say that data is partitioned. Any entities
 written to a partitioned dataset are evaluated with its
 {@code PartitionStrategy} which, in turn, produces a {@link PartitionKey}
 that is used by the dataset implementation to select the proper partition.
 </p>
 
 @see FieldPartitioner
 @see PartitionKey
 @see DatasetDescriptor
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.PartitionStrategy -->
  <!-- start class com.cloudera.cdk.data.PartitionStrategy.Builder -->
  <class name="PartitionStrategy.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.cdk.data.PartitionStrategy&gt;"/>
    <constructor name="PartitionStrategy.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure a hash partitioner with the specified number of {@code buckets}
 .
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param buckets
          The number of buckets into which data is to be partitioned.
 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="hash" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure a hash partitioner with the specified number of {@code buckets}
 .

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @param buckets
          The number of buckets into which data is to be partitioned.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="identity" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure an identity partitioner with a cardinality hint of
 {@code buckets} size.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param buckets
          A hint as to the number of partitions that will be created (i.e.
          the number of discrete values for the field {@code name} in the
          data).
 @return An instance of the builder for method chaining.
 @see IdentityFieldPartitioner]]>
      </doc>
    </method>
    <method name="range" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="int[]"/>
      <doc>
      <![CDATA[Configure a range partitioner with a set of {@code upperBounds}.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param upperBounds
          A variadic list of upper bounds of each partition.
 @return An instance of the builder for method chaining.
 @see IntRangeFieldPartitioner]]>
      </doc>
    </method>
    <method name="range" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="java.lang.Comparable[]"/>
      <doc>
      <![CDATA[Configure a range partitioner with a set of {@code upperBounds}.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param upperBounds
          A variadic list of upper bounds of each partition.
 @return An instance of the builder for method chaining.
 @see com.cloudera.cdk.data.partition.RangeFieldPartitioner]]>
      </doc>
    </method>
    <method name="year" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the year from a timestamp field.
 The UTC timezone is assumed.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="month" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the month from a timestamp field.
 The UTC timezone is assumed.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="day" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the day from a timestamp field.
 The UTC timezone is assumed.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="hour" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the hour from a timestamp field.
 The UTC timezone is assumed.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="minute" return="com.cloudera.cdk.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the minute from a timestamp field.
 The UTC timezone is assumed.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.cdk.data.PartitionStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get the configured {@link PartitionStrategy} instance.
 </p>
 <p>
 This builder should be considered single use and discarded after a call
 to this method.
 </p>
 
 @return The configured instance of {@link PartitionStrategy}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link PartitionStrategy}s.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.PartitionStrategy.Builder -->
</package>
<package name="com.cloudera.cdk.data.crunch">
  <!-- start class com.cloudera.cdk.data.crunch.CrunchDatasets -->
  <class name="CrunchDatasets" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CrunchDatasets"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="asSource" return="org.apache.crunch.io.ReadableSource&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataset" type="com.cloudera.cdk.data.Dataset"/>
      <param name="type" type="java.lang.Class&lt;E&gt;"/>
      <doc>
      <![CDATA[<p>
 Expose the given {@link Dataset} as a Crunch {@link ReadableSource}.
 </p>
 @param dataset the dataset to read from
 @param type    the Java type of the entities in the dataset
 @param <E>     the type of entity produced by the source
 @return the {@link ReadableSource}, or <code>null</code> if the dataset is not
 filesystem-based.]]>
      </doc>
    </method>
    <method name="asTarget" return="org.apache.crunch.Target"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataset" type="com.cloudera.cdk.data.Dataset"/>
      <doc>
      <![CDATA[<p>
 Expose the given {@link Dataset} as a Crunch {@link Target}.
 </p>
 @param dataset the dataset to write to
 @return the {@link Target}, or <code>null</code> if the dataset is not
 filesystem-based.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A helper class for exposing a filesystem-based dataset as a Crunch
 {@link ReadableSource} or {@link Target}.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.crunch.CrunchDatasets -->
</package>
<package name="com.cloudera.cdk.data.filesystem">
  <!-- start class com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository -->
  <class name="FileSystemDatasetRepository" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.data.DatasetRepository"/>
    <constructor name="FileSystemDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} on the given {@link FileSystem} and
 root directory, and a {@link FileSystemMetadataProvider} with the same {@link
 FileSystem} and root directory.

 @param fileSystem    the filesystem to store metadata and datasets in
 @param rootDirectory the root directory for metadata and datasets]]>
      </doc>
    </constructor>
    <constructor name="FileSystemDatasetRepository" type="java.net.URI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} with a root directory at the
 given {@link URI}, and a {@link FileSystemMetadataProvider} with the same root
 directory.

 @param uri the root directory for metadata and datasets
 @since 0.3.0]]>
      </doc>
    </constructor>
    <constructor name="FileSystemDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, com.cloudera.cdk.data.MetadataProvider"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} on the given {@link FileSystem} and
 root directory, with the given {@link MetadataProvider} for metadata storage.

 @param fileSystem       the filesystem to store datasets in
 @param rootDirectory    the root directory for datasets
 @param metadataProvider the provider for metadata storage]]>
      </doc>
    </constructor>
    <method name="create" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
    </method>
    <method name="update" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
    </method>
    <method name="get" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="partitionKeyForPath" return="com.cloudera.cdk.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataset" type="com.cloudera.cdk.data.Dataset"/>
      <param name="partitionPath" type="java.net.URI"/>
      <doc>
      <![CDATA[Get a {@link com.cloudera.cdk.data.PartitionKey} corresponding to a partition's filesystem path
 represented as a {@link URI}. If the path is not a valid partition,
 then {@link IllegalArgumentException} is thrown. Note that the partition does not
 have to exist.
 @param dataset the filesystem dataset
 @param partitionPath a directory path where the partition data is stored
 @return a partition key representing the partition at the given path
 @since 0.4.0]]>
      </doc>
    </method>
    <method name="pathForDataset" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[<p>
 Implementations should return the fully-qualified path of the data directory for
 the dataset with the given name.
 </p>
 <p>
 This method is for internal use only and users should not call it directly.
 </p>
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRootDirectory" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the root directory in the filesystem where datasets are stored.]]>
      </doc>
    </method>
    <method name="getFileSystem" return="org.apache.hadoop.fs.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link FileSystem} on which datasets are stored.]]>
      </doc>
    </method>
    <method name="getMetadataProvider" return="com.cloudera.cdk.data.MetadataProvider"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link MetadataProvider} being used by this repository.
 @since 0.2.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A {@link com.cloudera.cdk.data.DatasetRepository} that stores data in a Hadoop {@link FileSystem}.
 </p>
 <p>
 Given a {@link FileSystem}, a root directory, and a {@link com.cloudera.cdk.data.MetadataProvider},
 this {@link com.cloudera.cdk.data.DatasetRepository} implementation can load and store
 {@link com.cloudera.cdk.data.Dataset}s on both local filesystems as well as the Hadoop Distributed
 FileSystem (HDFS). Users may directly instantiate this class with the three
 dependencies above and then perform dataset-related operations using any of
 the provided methods. The primary methods of interest will be
 {@link #create(String, com.cloudera.cdk.data.DatasetDescriptor)}, {@link #get(String)}, and
 {@link #drop(String)} which create a new dataset, load an existing
 dataset, or delete an existing dataset, respectively. Once a dataset has been created
 or loaded, users can invoke the appropriate {@link com.cloudera.cdk.data.Dataset} methods to get a reader
 or writer as needed.
 </p>

 @see com.cloudera.cdk.data.DatasetRepository
 @see com.cloudera.cdk.data.Dataset
 @see com.cloudera.cdk.data.DatasetDescriptor
 @see com.cloudera.cdk.data.PartitionStrategy
 @see com.cloudera.cdk.data.MetadataProvider]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository -->
  <!-- start class com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder -->
  <class name="FileSystemDatasetRepository.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository&gt;"/>
    <constructor name="FileSystemDatasetRepository.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="rootDirectory" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="org.apache.hadoop.fs.Path"/>
      <doc>
      <![CDATA[The root directory for metadata and dataset files.]]>
      </doc>
    </method>
    <method name="rootDirectory" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[The root directory for metadata and dataset files.]]>
      </doc>
    </method>
    <method name="fileSystem" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSystem" type="org.apache.hadoop.fs.FileSystem"/>
      <doc>
      <![CDATA[The {@link FileSystem} to store metadata and dataset files in. Optional. If not
 specified, the default filesystem will be used.]]>
      </doc>
    </method>
    <method name="metadataProvider" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadataProvider" type="com.cloudera.cdk.data.MetadataProvider"/>
      <doc>
      <![CDATA[The {@link MetadataProvider} for metadata storage. Optional. If not
 specified, a {@link FileSystemMetadataProvider} will be used.]]>
      </doc>
    </method>
    <method name="configuration" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="org.apache.hadoop.conf.Configuration"/>
      <doc>
      <![CDATA[The {@link Configuration} used to find the {@link FileSystem}. Optional. If not
 specified, the default configuration will be used.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link FileSystemDatasetRepository}
 instances.
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.filesystem.FileSystemDatasetRepository.Builder -->
  <!-- start class com.cloudera.cdk.data.filesystem.FileSystemMetadataProvider -->
  <class name="FileSystemMetadataProvider" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.data.MetadataProvider"/>
    <constructor name="FileSystemMetadataProvider" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="load" return="com.cloudera.cdk.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="save"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
    </method>
    <method name="delete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A {@link MetadataProvider} that stores dataset metadata in a Hadoop
 {@link FileSystem}.
 </p>
 <p>
 When configured with a root directory, this implementation serializes the
 information within a {@link com.cloudera.cdk.data.DatasetDescriptor} on the provided
 {@link FileSystem}. The descriptor is serialized as an Avro object and stored
 in a directory named after the dataset name. For example, if the dataset name
 is {@code logs}, the directory {@code rootDirectory/logs/} will be created,
 if it doesn't exist, and the serialized descriptor will be stored in the file
 {@code descriptor.avro}.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.filesystem.FileSystemMetadataProvider -->
</package>
<package name="com.cloudera.cdk.data.flume">
  <!-- start class com.cloudera.cdk.data.flume.Log4jAppender -->
  <class name="Log4jAppender" extends="org.apache.flume.clients.log4jappender.Log4jAppender"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Log4jAppender"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="Log4jAppender" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the hostname and port. Even if these are passed the
 <tt>activateOptions()</tt> function must be called before calling
 <tt>append()</tt>, else <tt>append()</tt> will throw an Exception.
 @param hostname The first hop where the client should connect to.
 @param port The port to connect on the host.]]>
      </doc>
    </constructor>
    <method name="setDatasetRepositoryClass"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="datasetRepositoryClass" type="java.lang.String"/>
    </method>
    <method name="setDatasetRepositoryUri"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="datasetRepositoryUri" type="java.lang.String"/>
    </method>
    <method name="setDatasetName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="datasetName" type="java.lang.String"/>
    </method>
    <method name="populateAvroHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="hdrs" type="java.util.Map&lt;java.lang.String, java.lang.String&gt;"/>
      <param name="schema" type="org.apache.avro.Schema"/>
      <param name="message" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.flume.Log4jAppender -->
</package>
<package name="com.cloudera.cdk.data.hcatalog">
  <!-- start class com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository -->
  <class name="HCatalogDatasetRepository" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.data.DatasetRepository"/>
    <constructor name="HCatalogDatasetRepository"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with managed tables. The location of the
 data directory is determined by the setting of
 <code>hive.metastore.warehouse.dir</code>, read from <i>hive-site.xml</i> on the
 classpath, or if no such file is found then the default for this property.
 </p>]]>
      </doc>
    </constructor>
    <constructor name="HCatalogDatasetRepository" type="java.net.URI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with external tables.
 </p>
 @param uri the root directory for datasets
 @since 0.3.0]]>
      </doc>
    </constructor>
    <constructor name="HCatalogDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with external tables.
 </p>
 @param fileSystem    the filesystem to store datasets in
 @param rootDirectory the root directory for datasets]]>
      </doc>
    </constructor>
    <method name="create" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
    </method>
    <method name="update" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.cdk.data.DatasetDescriptor"/>
    </method>
    <method name="get" return="com.cloudera.cdk.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[<p>
 A {@link DatasetRepository} that uses the Hive/HCatalog metastore for metadata,
 and stores data in a Hadoop {@link FileSystem}.
 </p>
 <p>
 The location of the data directory is either chosen by Hive/HCatalog (so called
 "managed tables"), or specified when creating an instance of this class by providing
 a {@link FileSystem}, and a root directory in the constructor ("external tables").
 </p>
 <p>
 The primary methods of interest will be
 {@link #create(String, DatasetDescriptor)}, {@link #get(String)}, and
 {@link #drop(String)} which create a new dataset, load an existing
 dataset, or delete an existing dataset, respectively. Once a dataset has been created
 or loaded, users can invoke the appropriate {@link Dataset} methods to get a reader
 or writer as needed.
 </p>

 @see DatasetRepository
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository -->
  <!-- start class com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder -->
  <class name="HCatalogDatasetRepository.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository&gt;"/>
    <constructor name="HCatalogDatasetRepository.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="rootDirectory" return="com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="org.apache.hadoop.fs.Path"/>
      <doc>
      <![CDATA[The root directory for dataset files.]]>
      </doc>
    </method>
    <method name="rootDirectory" return="com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[The root directory for dataset files.]]>
      </doc>
    </method>
    <method name="fileSystem" return="com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSystem" type="org.apache.hadoop.fs.FileSystem"/>
      <doc>
      <![CDATA[The {@link FileSystem} to store dataset files in. Optional. If not
 specified, the default filesystem will be used.]]>
      </doc>
    </method>
    <method name="configuration" return="com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="org.apache.hadoop.conf.Configuration"/>
      <doc>
      <![CDATA[The {@link Configuration} used to find the {@link FileSystem}. Optional. If not
 specified, the default configuration will be used.]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link HCatalogDatasetRepository}
 instances.
 @since 0.3.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.hcatalog.HCatalogDatasetRepository.Builder -->
</package>
<package name="com.cloudera.cdk.data.partition">
  <!-- start class com.cloudera.cdk.data.partition.DayOfMonthFieldPartitioner -->
  <class name="DayOfMonthFieldPartitioner" extends="com.cloudera.cdk.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DayOfMonthFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="valueToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.DayOfMonthFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.HashFieldPartitioner -->
  <class name="HashFieldPartitioner" extends="com.cloudera.cdk.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HashFieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HashFieldPartitioner" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.HashFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.HourFieldPartitioner -->
  <class name="HourFieldPartitioner" extends="com.cloudera.cdk.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HourFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="valueToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.HourFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.IdentityFieldPartitioner -->
  <class name="IdentityFieldPartitioner" extends="com.cloudera.cdk.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdentityFieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.IdentityFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.IntRangeFieldPartitioner -->
  <class name="IntRangeFieldPartitioner" extends="com.cloudera.cdk.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntRangeFieldPartitioner" type="java.lang.String, int[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.IntRangeFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.ListFieldPartitioner -->
  <class name="ListFieldPartitioner" extends="com.cloudera.cdk.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ListFieldPartitioner" type="java.lang.String, java.util.List&lt;java.util.Set&lt;?&gt;&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.ListFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.MinuteFieldPartitioner -->
  <class name="MinuteFieldPartitioner" extends="com.cloudera.cdk.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MinuteFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="valueToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.MinuteFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.MonthFieldPartitioner -->
  <class name="MonthFieldPartitioner" extends="com.cloudera.cdk.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MonthFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueToString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.MonthFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.PartitionFunctions -->
  <class name="PartitionFunctions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PartitionFunctions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="hash" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="identity" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="range" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="int[]"/>
    </method>
    <method name="range" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="java.lang.Comparable[]"/>
    </method>
    <method name="year" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="month" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="day" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="hour" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="minute" return="com.cloudera.cdk.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Convenience class so you can say, for example, <code>hash("username", 2)</code> in
 JEXL.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.PartitionFunctions -->
  <!-- start class com.cloudera.cdk.data.partition.RangeFieldPartitioner -->
  <class name="RangeFieldPartitioner" extends="com.cloudera.cdk.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RangeFieldPartitioner" type="java.lang.String, java.lang.Comparable[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="getUpperBounds" return="java.util.List&lt;java.lang.Comparable&lt;?&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.RangeFieldPartitioner -->
  <!-- start class com.cloudera.cdk.data.partition.YearFieldPartitioner -->
  <class name="YearFieldPartitioner" extends="com.cloudera.cdk.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="YearFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class com.cloudera.cdk.data.partition.YearFieldPartitioner -->
</package>
<package name="com.cloudera.cdk.morphline.api">
  <!-- start interface com.cloudera.cdk.morphline.api.Command -->
  <interface name="Command"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="notify"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notification" type="com.cloudera.cdk.morphline.api.Record"/>
      <doc>
      <![CDATA[Processes the given notification on the control plane of the subtree rooted at this command.]]>
      </doc>
    </method>
    <method name="process" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
      <doc>
      <![CDATA[Processes the given record on the data plane of this command.
 
 @return true to indicate that processing shall continue, false to indicate that backtracking
         shall be done]]>
      </doc>
    </method>
    <method name="getParent" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parent of this command.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A command transforms a record into zero or more records.
 
 A command has a boolean return code, indicating success or failure. All record handlers in a
 morphline implement this interface. Commands are chained together. The parent of a command A is
 the command B that passes records to A.
 
 Data is sent on the data plane whereas notifications are sent on the control plane, which is a
 separate communication channel.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.morphline.api.Command -->
  <!-- start interface com.cloudera.cdk.morphline.api.CommandBuilder -->
  <interface name="CommandBuilder"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the names with which this command can be invoked.
 
 The returned set can contain synonyms to enable backwards compatible name changes.]]>
      </doc>
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
      <doc>
      <![CDATA[Creates and returns a command rooted at the given morphline config.
 
 The command will feed records into child. The command will have parent as it's parent.
 Additional parameters can be passed via the morphline context.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface to create instances of morphline commands.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.morphline.api.CommandBuilder -->
  <!-- start interface com.cloudera.cdk.morphline.api.ExceptionHandler -->
  <interface name="ExceptionHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handleException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
      <doc>
      <![CDATA[Handle the given exception resulting from the given input record (the record can be null)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Morphline-wide default handler that commands can choose to use to handle exceptions.
 
 Mission critical, large-scale online production systems need to make progress without downtime
 despite some issues. Thus, the recommendation is that implementations of this handler rethrow
 exceptions in test mode, but try to log and continue in production mode, if that's considered
 appropriate and feasible.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.morphline.api.ExceptionHandler -->
  <!-- start class com.cloudera.cdk.morphline.api.MorphlineCompilationException -->
  <class name="MorphlineCompilationException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MorphlineCompilationException" type="java.lang.String, com.typesafe.config.Config"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MorphlineCompilationException" type="java.lang.String, com.typesafe.config.Config, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MorphlineCompilationException" type="java.lang.String, com.typesafe.config.Config, java.lang.Throwable, com.cloudera.cdk.morphline.api.CommandBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Indicates a parse error.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.api.MorphlineCompilationException -->
  <!-- start class com.cloudera.cdk.morphline.api.MorphlineContext -->
  <class name="MorphlineContext" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MorphlineContext"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For public access use {@link Builder#build()} instead]]>
      </doc>
    </constructor>
    <method name="getExceptionHandler" return="com.cloudera.cdk.morphline.api.ExceptionHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMetricRegistry" return="com.codahale.metrics.MetricRegistry"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCommandBuilder" return="java.lang.Class&lt;com.cloudera.cdk.morphline.api.CommandBuilder&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="builderName" type="java.lang.String"/>
    </method>
    <method name="importCommandBuilders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="importSpecs" type="java.util.Collection&lt;java.lang.String&gt;"/>
    </method>
    <doc>
    <![CDATA[Additional user defined parameters that will be passed to all morphline commands.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.api.MorphlineContext -->
  <!-- start class com.cloudera.cdk.morphline.api.MorphlineContext.Builder -->
  <class name="MorphlineContext.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MorphlineContext.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setExceptionHandler" return="com.cloudera.cdk.morphline.api.MorphlineContext.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="exceptionHandler" type="com.cloudera.cdk.morphline.api.ExceptionHandler"/>
    </method>
    <method name="setMetricRegistry" return="com.cloudera.cdk.morphline.api.MorphlineContext.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metricRegistry" type="com.codahale.metrics.MetricRegistry"/>
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.MorphlineContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="com.cloudera.cdk.morphline.api.MorphlineContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <field name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"
      transient="false" volatile="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Helper to construct a {@link MorphlineContext} instance.
 
 Example usage: 
 
 <pre>
 MorphlineContext context = new MorphlineContext.Builder().setMetricRegistry(new MetricRegistry()).build();
 </pre>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.api.MorphlineContext.Builder -->
  <!-- start class com.cloudera.cdk.morphline.api.MorphlineRuntimeException -->
  <class name="MorphlineRuntimeException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MorphlineRuntimeException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MorphlineRuntimeException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MorphlineRuntimeException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[Base class of all morphline exceptions.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.api.MorphlineRuntimeException -->
  <!-- start class com.cloudera.cdk.morphline.api.Record -->
  <class name="Record" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Record"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="copy" return="com.cloudera.cdk.morphline.api.Record"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFields" return="com.google.common.collect.ListMultimap&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="getFirstValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
    </method>
    <method name="replaceValues"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="removeAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
    </method>
    <method name="putIfAbsent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="other" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A record is a set of named fields where each field has a list of one or more values.
 
 A value can be of any type, i.e. any Java Object. That is, a record is a {@link ListMultimap} as
 in Guava#s {@link ArrayListMultimap}. Note that a field can be multi-valued and that any two
 records need not use common field names. This flexible data model corresponds exactly to the
 characteristics of the Solr/Lucene data model (i.e. a record is a SolrInputDocument). A field
 with zero values is removed from the record - it does not exist as such.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.api.Record -->
</package>
<package name="com.cloudera.cdk.morphline.avro">
  <!-- start class com.cloudera.cdk.morphline.avro.ExtractAvroPathsBuilder -->
  <class name="ExtractAvroPathsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ExtractAvroPathsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that uses zero or more avro path expressions to extract values from an Avro object.
 
 The Avro input object is expected to be contained in the {@link Fields#ATTACHMENT_BODY}
 
 Each expression consists of a record output field name (on the left side of the colon ':') as
 well as zero or more path steps (on the right hand side), each path step separated by a '/'
 slash. Avro arrays are traversed with the '[]' notation.
 
 The result of a path expression is a list of objects, each of which is added to the given record
 output field.
 
 The path language supports all Avro concepts, including nested structures, records, arrays, maps,
 unions, etc, as well as a flatten option that collects the primitives in a subtree into a flat
 list.
 
 Example:
 
 <pre>
       { extractAvroPaths {
           flatten : true
           paths : { 
             my_price : /price
             
             my_docId : /docId
             my_links_backward : "/links/backward"
             my_links_forward : "/links/forward"
             my_name_language_code : "/name[]/language[]/code"
             my_name_language_country : "/name[]/language[]/country"
   
             /mymapField/foo/label : /mapField/foo/label/
           } 
         }
       }
 </pre>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.avro.ExtractAvroPathsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.avro.ExtractAvroTreeBuilder -->
  <class name="ExtractAvroTreeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ExtractAvroTreeBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that converts an attached Avro datum to a morphline record by recursively walking the
 Avro tree and extracting all data into a single morphline record, with fields named by their path
 in the Avro tree.
 
 The Avro input object is expected to be contained in the {@link Fields#ATTACHMENT_BODY}
 
 This kind of mapping is useful for simple Avro schemas, but a rather simplistic (and perhaps
 expensive) approach for complex Avro schemas.
 
 Example output:
 
 <pre>
    assertEquals(Arrays.asList("us", "gb"), record.get("/name/language/country"));
    assertEquals(Arrays.asList("en-us", "en", "en-gb"), record.get("/name/language/code"));
    assertEquals(Arrays.asList(20, 40, 60), record.get("/links/forward"));
    assertEquals(Arrays.asList("http://A", "http://B"), record.get("/name/url"));
    assertEquals(Arrays.asList(10), record.get("/docId"));
 </pre>
 
 STATUS: EXPERIMENTAL]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.avro.ExtractAvroTreeBuilder -->
  <!-- start class com.cloudera.cdk.morphline.avro.ReadAvroBuilder -->
  <class name="ReadAvroBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadAvroBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="AVRO_MEMORY_MIME_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The MIME type identifier that will be filled into output records]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Command that parses an InputStream that contains Avro data; for each Avro datum, the command
 emits a morphline record containing the datum as an attachment in {@link Fields#ATTACHMENT_BODY}.
 
 The Avro schema that was used to write the Avro data must be explicitly supplied. Optionally, the
 Avro schema that shall be used for reading can be supplied as well.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.avro.ReadAvroBuilder -->
  <!-- start class com.cloudera.cdk.morphline.avro.ReadAvroContainerBuilder -->
  <class name="ReadAvroContainerBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadAvroContainerBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="MIME_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The MIME type that input attachments shall have]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Command that parses an InputStream that contains Avro binary container file data; for each Avro
 datum, the command emits a morphline record containing the datum as an attachment in
 {@link Fields#ATTACHMENT_BODY}.
 
 The Avro schema that was used to write the Avro data is retrieved from the container. Optionally, the
 Avro schema that shall be used for reading can be supplied as well.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.avro.ReadAvroContainerBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.base">
  <!-- start class com.cloudera.cdk.morphline.base.AbstractCommand -->
  <class name="AbstractCommand" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.Command"/>
    <constructor name="AbstractCommand" type="com.typesafe.config.Config, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.MorphlineContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getParent" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getChild" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getConfig" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getContext" return="com.cloudera.cdk.morphline.api.MorphlineContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getConfigs" return="com.cloudera.cdk.morphline.base.Configs"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="notify"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="notification" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="doNotify"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="notification" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="process" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="doProcess" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="validateArguments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="getCounter" return="com.codahale.metrics.Counter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
    </method>
    <method name="getHistogram" return="com.codahale.metrics.Histogram"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
    </method>
    <method name="getMeter" return="com.codahale.metrics.Meter"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
    </method>
    <method name="getTimer" return="com.codahale.metrics.Timer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="names" type="java.lang.String[]"/>
    </method>
    <method name="buildCommandChain" return="java.util.List&lt;com.cloudera.cdk.morphline.api.Command&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="rootConfig" type="com.typesafe.config.Config"/>
      <param name="configKey" type="java.lang.String"/>
      <param name="finalChild" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="ignoreNotifications" type="boolean"/>
      <doc>
      <![CDATA[Factory method to create the chain of commands rooted at the given rootConfig. The last command
 in the chain will feed records into finalChild.
 
 @param ignoreNotifications
          if true indicates don't forward notifications at the end of the chain of commands.
          This is a feature that multi-branch commands like tryRules and ifThenElse need to
          avoid sending a notification multiple times to finalChild, once from each branch.]]>
      </doc>
    </method>
    <method name="buildCommand" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cmdConfig" type="com.typesafe.config.Config"/>
      <param name="currentParent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="finalChild" type="com.cloudera.cdk.morphline.api.Command"/>
      <doc>
      <![CDATA[Factory method to create a command rooted at the given cmdConfig. The command will feed records
 into finalChild. The command will have currentParent as it's parent.]]>
      </doc>
    </method>
    <field name="LOG" type="org.slf4j.Logger"
      transient="false" volatile="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Base class for convenient implementation of {@link Command} classes.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.AbstractCommand -->
  <!-- start class com.cloudera.cdk.morphline.base.Compiler -->
  <class name="Compiler" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Compiler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compile" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="morphlineFile" type="java.io.File"/>
      <param name="morphlineId" type="java.lang.String"/>
      <param name="morphlineContext" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
      <param name="finalChild" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="overrides" type="com.typesafe.config.Config[]"/>
      <doc>
      <![CDATA[Parses the given morphlineFile, then finds the morphline with the given morphlineId within,
 then compiles the morphline and returns the corresponding morphline command. The returned
 command will feed records into finalChild.]]>
      </doc>
    </method>
    <method name="parse" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <param name="overrides" type="com.typesafe.config.Config[]"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Loads the given config file from the local file system]]>
      </doc>
    </method>
    <method name="find" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="morphlineId" type="java.lang.String"/>
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="nameForErrorMsg" type="java.lang.String"/>
      <doc>
      <![CDATA[Finds the given morphline id within the given morphline config, using the given nameForErrorMsg
 for error reporting.]]>
      </doc>
    </method>
    <method name="compile" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="morphlineConfig" type="com.typesafe.config.Config"/>
      <param name="morphlineContext" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
      <param name="finalChild" type="com.cloudera.cdk.morphline.api.Command"/>
      <doc>
      <![CDATA[Compiles the given morphline config using the given morphline context. The returned command
 will feed records into finalChild or into /dev/null if finalChild is null.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Tool to parse and compile a morphline file or morphline config.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Compiler -->
  <!-- start class com.cloudera.cdk.morphline.base.Configs -->
  <class name="Configs" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Configs"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validateArguments"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
    </method>
    <method name="getString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="java.lang.String"/>
    </method>
    <method name="getString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getStringList" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="java.util.List&lt;java.lang.String&gt;"/>
    </method>
    <method name="getStringList" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getConfigList" return="java.util.List&lt;? extends com.typesafe.config.Config&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="java.util.List&lt;? extends com.typesafe.config.Config&gt;"/>
    </method>
    <method name="getConfigList" return="java.util.List&lt;? extends com.typesafe.config.Config&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getConfig" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="com.typesafe.config.Config"/>
    </method>
    <method name="getConfig" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="boolean"/>
    </method>
    <method name="getBoolean" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="int"/>
    </method>
    <method name="getInt" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="long"/>
    </method>
    <method name="getLong" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="double"/>
    </method>
    <method name="getDouble" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
    </method>
    <method name="getCharset" return="java.nio.charset.Charset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="path" type="java.lang.String"/>
      <param name="defaults" type="java.nio.charset.Charset"/>
    </method>
    <doc>
    <![CDATA[Helpers to traverse and read parts of a HOCON data structure.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Configs -->
  <!-- start class com.cloudera.cdk.morphline.base.FaultTolerance -->
  <class name="FaultTolerance" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.ExceptionHandler"/>
    <constructor name="FaultTolerance" type="boolean, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="FaultTolerance" type="boolean, boolean, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="handleException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="t" type="java.lang.Throwable"/>
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <field name="IS_PRODUCTION_MODE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="IS_IGNORING_RECOVERABLE_EXCEPTIONS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="RECOVERABLE_EXCEPTION_CLASSES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Mission critical, large-scale online production systems need to make progress without downtime
 despite some issues.
 
 Some program exceptions tend to be transient, in which case the corresponding task can be
 retried. Examples include network connection errors, timeouts, etc. These are called recoverable
 exceptions.
 
 The isIgnoringRecoverableExceptions should only be enabled if an exception misclassification bug
 has been identified.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.FaultTolerance -->
  <!-- start class com.cloudera.cdk.morphline.base.FieldExpression -->
  <class name="FieldExpression" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="FieldExpression" type="java.lang.String, com.typesafe.config.Config"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="evaluate" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
      <doc>
      <![CDATA[Returns the values of a {@link Record} referred to by the given field expression]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Helper to fetch the values of a field of a {@link Record} referred to by a field expression,
 which is a String of the form <code>@{fieldname}</code>.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.FieldExpression -->
  <!-- start class com.cloudera.cdk.morphline.base.Fields -->
  <class name="Fields" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Fields"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="BASE_ID" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="TIMESTAMP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="MESSAGE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACHMENT_BODY" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACHMENT_MIME_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACHMENT_CHARSET" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ATTACHMENT_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Common record field names.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Fields -->
  <!-- start class com.cloudera.cdk.morphline.base.Metrics -->
  <class name="Metrics" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Metrics"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="NUM_PROCESS_CALLS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NUM_NOTIFY_CALLS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="NUM_RECORDS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="ELAPSED_TIME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Common metric names.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Metrics -->
  <!-- start class com.cloudera.cdk.morphline.base.Notifications -->
  <class name="Notifications" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Notifications"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLifecycleEvents" return="java.util.List"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notification" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="notifyBeginTransaction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="com.cloudera.cdk.morphline.api.Command"/>
    </method>
    <method name="notifyCommitTransaction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="com.cloudera.cdk.morphline.api.Command"/>
    </method>
    <method name="notifyRollbackTransaction"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="com.cloudera.cdk.morphline.api.Command"/>
    </method>
    <method name="notifyShutdown"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="com.cloudera.cdk.morphline.api.Command"/>
    </method>
    <method name="notifyStartSession"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="command" type="com.cloudera.cdk.morphline.api.Command"/>
    </method>
    <method name="containsLifecycleEvent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notification" type="com.cloudera.cdk.morphline.api.Record"/>
      <param name="event" type="com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent"/>
    </method>
    <field name="LIFE_CYLCLE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Tools for notifications on the control plane.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Notifications -->
  <!-- start class com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent -->
  <class name="Notifications.LifecycleEvent" extends="java.lang.Enum&lt;com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Notifications.LifecycleEvent -->
  <!-- start class com.cloudera.cdk.morphline.base.Validator -->
  <class name="Validator" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="Validator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="validateRange"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="value" type="T"/>
      <param name="min" type="java.lang.Comparable&lt;T&gt;"/>
      <param name="max" type="java.lang.Comparable&lt;T&gt;"/>
      <doc>
      <![CDATA[Validates that the given value is contained in the range [min, max]]]>
      </doc>
    </method>
    <method name="validateEnum" return="T extends java.lang.Enum&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="value" type="java.lang.String"/>
      <param name="type" type="java.lang.Class&lt;T&gt;"/>
      <param name="choices" type="T[]"/>
      <doc>
      <![CDATA[Validates that an enum of the given type with the given value exists, and that this enum is
 contained in the given list of permitted choices; finally returns that enum object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Simple helper to validate user configurable parameters.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.base.Validator -->
</package>
<package name="com.cloudera.cdk.morphline.hadoop.sequencefile">
  <!-- start class com.cloudera.cdk.morphline.hadoop.sequencefile.ReadSequenceFileBuilder -->
  <class name="ReadSequenceFileBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadSequenceFileBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="OUTPUT_MEDIA_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="SEQUENCE_FILE_META_DATA" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONFIG_KEY_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="CONFIG_VALUE_FIELD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Command that emits one record per sequence file entry in the input stream of the first attachment.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.hadoop.sequencefile.ReadSequenceFileBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.json">
  <!-- start class com.cloudera.cdk.morphline.json.ExtractJsonPathsBuilder -->
  <class name="ExtractJsonPathsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ExtractJsonPathsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that uses zero or more JSON path expressions to extract values from a JSON object.
 
 The JSON input object is expected to be contained in the {@link Fields#ATTACHMENT_BODY}
 
 Each expression consists of a record output field name (on the left side of the colon ':') as
 well as zero or more path steps (on the right hand side), each path step separated by a '/'
 slash. JSON arrays are traversed with the '[]' notation.
 
 The result of a path expression is a list of objects, each of which is added to the given record
 output field.
 
 The path language supports all JSON concepts, including nested structures, records, arrays, etc,
 as well as a flatten option that collects the primitives in a subtree into a flat list.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.json.ExtractJsonPathsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.json.ReadJsonBuilder -->
  <class name="ReadJsonBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadJsonBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="MIME_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The MIME type identifier that will be filled into output records]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Command that parses an InputStream that contains JSON data; for each JSON object in the stream,
 the command emits a morphline record containing the object as an attachment in
 {@link Fields#ATTACHMENT_BODY}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.json.ReadJsonBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.saxon">
  <!-- start class com.cloudera.cdk.morphline.saxon.ConvertHTMLBuilder -->
  <class name="ConvertHTMLBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ConvertHTMLBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that converts HTML to XHTML using the <a
 href="http://ccil.org/~cowan/XML/tagsoup/">TagSoup</a> library.
 
 Instead of parsing well-formed or valid XML, this command parses HTML as it is found in the wild:
 poor, nasty and brutish, though quite often far from short. TagSoup (and hence this command) is
 designed for people who have to process this stuff using some semblance of a rational application
 design. By providing this converter, it allows standard XML tools to be applied to even the
 worst HTML.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.saxon.ConvertHTMLBuilder -->
  <!-- start class com.cloudera.cdk.morphline.saxon.XQueryBuilder -->
  <class name="XQueryBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="XQueryBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that parses an InputStream that contains an XML document and runs the given XQuery over
 the XML document. For each item in the query result sequence, the command emits a morphline record
 containing the item's name-value pairs.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.saxon.XQueryBuilder -->
  <!-- start class com.cloudera.cdk.morphline.saxon.XSLTBuilder -->
  <class name="XSLTBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="XSLTBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that parses an InputStream that contains an XML document and runs the given XSL Transform
 over the XML document. For each item in the query result sequence, the command emits a morphline
 record containing the item's name-value pairs.
 
 TODO: Add support for streaming via fragmentPath.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.saxon.XSLTBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.scriptengine.java">
  <!-- start class com.cloudera.cdk.morphline.scriptengine.java.FastJavaScriptEngine -->
  <class name="FastJavaScriptEngine" extends="javax.script.AbstractScriptEngine"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.script.Compilable"/>
    <constructor name="FastJavaScriptEngine"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="compile" return="javax.script.CompiledScript"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="script" type="java.lang.String"/>
      <param name="methodName" type="java.lang.String"/>
      <param name="parameterTypes" type="java.lang.Class[]"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="compile" return="javax.script.CompiledScript"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="script" type="java.lang.String"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="compile" return="javax.script.CompiledScript"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="eval" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <param name="ctx" type="javax.script.ScriptContext"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="eval" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="ctx" type="javax.script.ScriptContext"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="getFactory" return="javax.script.ScriptEngineFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="createBindings" return="javax.script.Bindings"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is a fast script engine for Java programming language - I modified JSR
 223 Java Scripting a little for some 100x less overhead for invoking "static" methods.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.scriptengine.java.FastJavaScriptEngine -->
  <!-- start class com.cloudera.cdk.morphline.scriptengine.java.FastJavaScriptEngine.JavaCompiledScript -->
  <class name="FastJavaScriptEngine.JavaCompiledScript" extends="javax.script.CompiledScript"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="eval" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="params" type="java.lang.Object[]"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <method name="getEngine" return="javax.script.ScriptEngine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="eval" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ctx" type="javax.script.ScriptContext"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
  </class>
  <!-- end class com.cloudera.cdk.morphline.scriptengine.java.FastJavaScriptEngine.JavaCompiledScript -->
  <!-- start class com.cloudera.cdk.morphline.scriptengine.java.JavaScriptEngineFactory -->
  <class name="JavaScriptEngineFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="javax.script.ScriptEngineFactory"/>
    <constructor name="JavaScriptEngineFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getEngineName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getEngineVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getExtensions" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLanguageName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLanguageVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getMethodCallSyntax" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.String"/>
      <param name="m" type="java.lang.String"/>
      <param name="args" type="java.lang.String[]"/>
    </method>
    <method name="getMimeTypes" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getNames" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getOutputStatement" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="toDisplay" type="java.lang.String"/>
    </method>
    <method name="getParameter" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
    </method>
    <method name="getProgram" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statements" type="java.lang.String[]"/>
    </method>
    <method name="getScriptEngine" return="javax.script.ScriptEngine"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[This is script engine factory for "Java" script engine.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.scriptengine.java.JavaScriptEngineFactory -->
  <!-- start class com.cloudera.cdk.morphline.scriptengine.java.ScriptEvaluator -->
  <class name="ScriptEvaluator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ScriptEvaluator" type="java.lang.String, java.lang.String, java.lang.Class&lt;T&gt;, java.lang.String[], java.lang.Class[], java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </constructor>
    <method name="evaluate" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="params" type="java.lang.Object[]"/>
      <exception name="ScriptException" type="javax.script.ScriptException"/>
    </method>
    <doc>
    <![CDATA[Creates and compiles the given Java code block, wrapped into a Java method with the given return
 type and parameter types, along with a Java class definition that contains the given import
 statements.
 <p>
 Compilation is done in main memory, i.e. without writing to the filesystem.
 <p>
 The result is an object that can be executed (and reused) any number of times. This is a high
 performance implementation, using an optimized variant of https://scripting.dev.java.net/" (JSR
 223 Java Scripting). Calling {@link #evaluate(Object...)} just means calling
 {@link Method#invoke(Object, Object...)} and as such has the same minimal runtime cost, i.e.
 O(100M calls/sec/core).
 
 Instances of this class are thread-safe if the user provided script statements are thread-safe.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.scriptengine.java.ScriptEvaluator -->
</package>
<package name="com.cloudera.cdk.morphline.solr">
  <!-- start interface com.cloudera.cdk.morphline.solr.DocumentLoader -->
  <interface name="DocumentLoader"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="beginTransaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Begins a transaction]]>
      </doc>
    </method>
    <method name="load"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="org.apache.solr.common.SolrInputDocument"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Loads the given document into the destination]]>
      </doc>
    </method>
    <method name="commitTransaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Sends any outstanding documents to the destination and waits for a positive
 or negative ack (i.e. exception). Depending on the outcome the caller
 should then commit or rollback the current flume transaction
 correspondingly.
 
 @throws IOException
           If there is a low-level I/O error.]]>
      </doc>
    </method>
    <method name="rollbackTransaction" return="org.apache.solr.client.solrj.response.UpdateResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Performs a rollback of all non-committed documents pending.
 <p>
 Note that this is not a true rollback as in databases. Content you have
 previously added may have already been committed due to autoCommit, buffer
 full, other client performing a commit etc. So this is only a best-effort
 rollback.
 
 @throws IOException
           If there is a low-level I/O error.]]>
      </doc>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Releases allocated resources]]>
      </doc>
    </method>
    <method name="ping" return="org.apache.solr.client.solrj.response.SolrPingResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <doc>
      <![CDATA[Issues a ping request to check if the server is alive
 
 @throws IOException
           If there is a low-level I/O error.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A vehicle to load a list of Solr documents into some kind of destination,
 such as a SolrServer or MapReduce RecordWriter.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.cdk.morphline.solr.DocumentLoader -->
  <!-- start class com.cloudera.cdk.morphline.solr.GenerateSolrSequenceKeyBuilder -->
  <class name="GenerateSolrSequenceKeyBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="GenerateSolrSequenceKeyBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A command that assigns a record unique key that is the concatenation of the given
 <code>baseIdField</code> record field, followed by a running count of the record number within
 the current session. The count is reset to zero whenever a "startSession" notification is
 received.
 <p>
 For example, assume a CSV file containing multiple records but no unique ids, and the
 <code>baseIdField</code> field is the filesystem path of the file. Now this command can be used
 to assign the following record values to Solr's unique key field:
 <code>$path#0, $path#1, ... $path#N</code>.
 <p>
 The name of the unique key field is fetched from Solr's schema.xml file, as directed by the
 <code>solrLocator</code> configuration parameter.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.GenerateSolrSequenceKeyBuilder -->
  <!-- start class com.cloudera.cdk.morphline.solr.LoadSolrBuilder -->
  <class name="LoadSolrBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LoadSolrBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A command that loads a record into a SolrServer or MapReduce SolrOutputFormat.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.LoadSolrBuilder -->
  <!-- start class com.cloudera.cdk.morphline.solr.SanitizeUnknownSolrFieldsBuilder -->
  <class name="SanitizeUnknownSolrFieldsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="SanitizeUnknownSolrFieldsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that sanitizes record fields that are unknown to Solr schema.xml by either deleting them
 (renameToPrefix is absent or a zero length string), or by moving them to a field prefixed with
 the given renameToPrefix (e.g. renameToPrefix = "ignored_" to use typical dynamic Solr fields).
 <p>
 Recall that Solr throws an exception on any attempt to load a document that contains a field that
 isn't specified in schema.xml.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.SanitizeUnknownSolrFieldsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.solr.SolrLocator -->
  <class name="SolrLocator" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrLocator" type="com.cloudera.cdk.morphline.api.MorphlineContext"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <constructor name="SolrLocator" type="com.typesafe.config.Config, com.cloudera.cdk.morphline.api.MorphlineContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLoader" return="com.cloudera.cdk.morphline.solr.DocumentLoader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIndexSchema" return="org.apache.solr.schema.IndexSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toConfig" return="com.typesafe.config.Config"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.String"/>
    </method>
    <method name="getCollectionName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setCollectionName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="collectionName" type="java.lang.String"/>
    </method>
    <method name="getZkHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setZkHost"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="zkHost" type="java.lang.String"/>
    </method>
    <method name="getSolrHomeDir" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setSolrHomeDir"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="solrHomeDir" type="java.lang.String"/>
    </method>
    <method name="getServerUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setServerUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="solrUrl" type="java.lang.String"/>
    </method>
    <method name="getBatchSize" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setBatchSize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="batchSize" type="int"/>
    </method>
    <doc>
    <![CDATA[Set of configuration parameters that identify the location and schema of a Solr server or
 SolrCloud; Based on this information this class can return the schema and a corresponding
 {@link DocumentLoader}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.SolrLocator -->
  <!-- start class com.cloudera.cdk.morphline.solr.SolrMorphlineContext -->
  <class name="SolrMorphlineContext" extends="com.cloudera.cdk.morphline.api.MorphlineContext"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrMorphlineContext"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[For public access use {@link Builder#build()} instead]]>
      </doc>
    </constructor>
    <method name="getDocumentLoader" return="com.cloudera.cdk.morphline.solr.DocumentLoader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getIndexSchema" return="org.apache.solr.schema.IndexSchema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A context that is specific to Solr.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.SolrMorphlineContext -->
  <!-- start class com.cloudera.cdk.morphline.solr.SolrMorphlineContext.Builder -->
  <class name="SolrMorphlineContext.Builder" extends="com.cloudera.cdk.morphline.api.MorphlineContext.Builder"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="SolrMorphlineContext.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setDocumentLoader" return="com.cloudera.cdk.morphline.solr.SolrMorphlineContext.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loader" type="com.cloudera.cdk.morphline.solr.DocumentLoader"/>
    </method>
    <method name="setIndexSchema" return="com.cloudera.cdk.morphline.solr.SolrMorphlineContext.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.solr.schema.IndexSchema"/>
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.solr.SolrMorphlineContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="create" return="com.cloudera.cdk.morphline.solr.SolrMorphlineContext"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Helper to construct a {@link SolrMorphlineContext} instance.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.SolrMorphlineContext.Builder -->
  <!-- start class com.cloudera.cdk.morphline.solr.SolrServerDocumentLoader -->
  <class name="SolrServerDocumentLoader" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.solr.DocumentLoader"/>
    <constructor name="SolrServerDocumentLoader" type="org.apache.solr.client.solrj.SolrServer, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="beginTransaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="load"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="doc" type="org.apache.solr.common.SolrInputDocument"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
    </method>
    <method name="commitTransaction"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="rollbackTransaction" return="org.apache.solr.client.solrj.response.UpdateResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="ping" return="org.apache.solr.client.solrj.response.SolrPingResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SolrServerException" type="org.apache.solr.client.solrj.SolrServerException"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getSolrServer" return="org.apache.solr.client.solrj.SolrServer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A vehicle to load a list of Solr documents into a local or remote {@link SolrServer}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.SolrServerDocumentLoader -->
  <!-- start class com.cloudera.cdk.morphline.solr.TokenizeTextBuilder -->
  <class name="TokenizeTextBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="TokenizeTextBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A command that uses the embedded Solr/Lucene Analyzer library to generate tokens from a text
 string, without sending data to a Solr server.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solr.TokenizeTextBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.solrcell">
  <!-- start class com.cloudera.cdk.morphline.solrcell.SolrCellBuilder -->
  <class name="SolrCellBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="SolrCellBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that pipes the first attachment of a record into one of the given Tika parsers, then maps
 the Tika output back to a record using SolrCell.
 <p>
 The Tika parser is chosen from the configurable list of parsers, depending on the MIME type
 specified in the input record. Typically, this requires an upstream DetectMimeTypeBuilder
 in a prior command.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solrcell.SolrCellBuilder -->
  <!-- start class com.cloudera.cdk.morphline.solrcell.StripNonCharSolrContentHandlerFactory -->
  <class name="StripNonCharSolrContentHandlerFactory" extends="org.apache.solr.handler.extraction.SolrContentHandlerFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="StripNonCharSolrContentHandlerFactory" type="java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createSolrContentHandler" return="org.apache.solr.handler.extraction.SolrContentHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadata" type="org.apache.tika.metadata.Metadata"/>
      <param name="params" type="org.apache.solr.common.params.SolrParams"/>
      <param name="schema" type="org.apache.solr.schema.IndexSchema"/>
    </method>
    <doc>
    <![CDATA[SolrContentHandler and associated factory that strips non-characters anhd trims on output.
 This prevents exceptions on parsing integer fields inside Solr server.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solrcell.StripNonCharSolrContentHandlerFactory -->
  <!-- start class com.cloudera.cdk.morphline.solrcell.TrimSolrContentHandlerFactory -->
  <class name="TrimSolrContentHandlerFactory" extends="org.apache.solr.handler.extraction.SolrContentHandlerFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TrimSolrContentHandlerFactory" type="java.util.Collection&lt;java.lang.String&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createSolrContentHandler" return="org.apache.solr.handler.extraction.SolrContentHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadata" type="org.apache.tika.metadata.Metadata"/>
      <param name="params" type="org.apache.solr.common.params.SolrParams"/>
      <param name="schema" type="org.apache.solr.schema.IndexSchema"/>
    </method>
    <doc>
    <![CDATA[SolrContentHandler and associated factory that trims field values on output.
 This prevents exceptions on parsing integer fields inside Solr server.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.solrcell.TrimSolrContentHandlerFactory -->
</package>
<package name="com.cloudera.cdk.morphline.stdio">
  <!-- start class com.cloudera.cdk.morphline.stdio.AbstractParser -->
  <class name="AbstractParser" extends="com.cloudera.cdk.morphline.base.AbstractCommand"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractParser" type="com.typesafe.config.Config, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.MorphlineContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addSupportedMimeType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="mediaType" type="java.lang.String"/>
    </method>
    <method name="doProcess" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="doProcess" return="boolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
      <param name="stream" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="incrementNumRecords"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </method>
    <method name="detectCharset" return="java.nio.charset.Charset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
      <param name="charset" type="java.nio.charset.Charset"/>
    </method>
    <method name="removeAttachments"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputRecord" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <field name="SUPPORTED_MIME_TYPES" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[Base class for convenient implementation of morphline parsers.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdio.AbstractParser -->
  <!-- start class com.cloudera.cdk.morphline.stdio.ReadClobBuilder -->
  <class name="ReadClobBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadClobBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that emits one record for the entire input stream of the first attachment, interpreting
 the stream as a Character Large Object (CLOB).]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdio.ReadClobBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdio.ReadCSVBuilder -->
  <class name="ReadCSVBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadCSVBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that extracts zero or more records from the input stream of the first attachment, 
 representing a Comma Separated Values (CSV) file.
 
 For the format see http://www.creativyst.com/Doc/Articles/CSV/CSV01.htm.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdio.ReadCSVBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdio.ReadLineBuilder -->
  <class name="ReadLineBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadLineBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that emits one record per line in the input stream of the first attachment.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdio.ReadLineBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdio.ReadMultiLineBuilder -->
  <class name="ReadMultiLineBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadMultiLineBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Multiline log parser that collapse multiline messages into a single record; supports "regex",
 "what" and "negate" configuration parameters similar to logstash.
 
 For example, this can be used to parse log4j with stack traces. Also see
 https://gist.github.com/smougenot/3182192 and http://logstash.net/docs/1.1.12/filters/multiline
 
 The <code>regex</code> parameter should match what you believe to be an indicator that the
 line is part of a multi-line record.
 
 The <code>what</code> parameter must be one of "previous" or "next" and indicates
 the relation of the regex to the multi-line record.
 
 The <code>negate</code> parameter can be true or false (defaults false). If true, a line not
 matching the regex will constitute a match of the multiline filter and the previous/next action
 will be applied. (vice-versa is also true)
 
 Example:
 
 <pre>
 regex : "(^.+Exception: .+)|(^\\s+at .+)|(^\\s+\\.\\.\\. \\d+ more)|(^\\s*Caused by:.+)"
 negate: false
 what : previous
 </pre>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdio.ReadMultiLineBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.stdlib">
  <!-- start class com.cloudera.cdk.morphline.stdlib.AbstractFieldTransformCommand -->
  <class name="AbstractFieldTransformCommand" extends="com.cloudera.cdk.morphline.base.AbstractCommand"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractFieldTransformCommand" type="com.typesafe.config.Config, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.Command, com.cloudera.cdk.morphline.api.MorphlineContext"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="doProcess" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="record" type="com.cloudera.cdk.morphline.api.Record"/>
    </method>
    <method name="transformFieldValue" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Transforms the given input value to some output value]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Base class for convenient implementation of commands that do in-place updates on a field.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.AbstractFieldTransformCommand -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.AddCurrentTimeBuilder -->
  <class name="AddCurrentTimeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="AddCurrentTimeBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PRESERVE_EXISTING_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A command that adds the result of {@link System#currentTimeMillis()} to a given output field.
 
 Typically, a <tt>convertTimestamp</tt> command is subsequently used to convert this timestamp to
 an application specific output format.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.AddCurrentTimeBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.AddLocalHostBuilder -->
  <class name="AddLocalHostBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="AddLocalHostBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PRESERVE_EXISTING_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="USE_IP" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A command that adds the name or IP of the local host to a given output field.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.AddLocalHostBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.AddValuesBuilder -->
  <class name="AddValuesBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="AddValuesBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[For each input field value, add the value to the given record output field.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.AddValuesBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.AddValuesIfAbsentBuilder -->
  <class name="AddValuesIfAbsentBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="AddValuesIfAbsentBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[For each input field value, add the value to the given record output field if the value isn't
 already contained in that field.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.AddValuesIfAbsentBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.CallParentPipeBuilder -->
  <class name="CallParentPipeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="CallParentPipeBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that routes records to the enclosing pipe morphline object.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.CallParentPipeBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.ContainsBuilder -->
  <class name="ContainsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ContainsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that succeeds if one of the field values of the given named field is equal to one of the
 the given values, and fails otherwise; Multiple fields can be named, in which case the results
 are ANDed.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.ContainsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.ConvertTimestampBuilder -->
  <class name="ConvertTimestampBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ConvertTimestampBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that converts the timestamps in a given field from one of a set of input date formats (in
 an input timezone) to an output date format (in an output timezone), while respecting daylight
 savings time rules. Provides reasonable defaults for common use cases.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.ConvertTimestampBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.DecodeBase64Builder -->
  <class name="DecodeBase64Builder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="DecodeBase64Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that converts a Base64 encoded String to a byte[] per Section <cite>6.8. Base64
 Content-Transfer-Encoding</cite> of <a href="http://www.ietf.org/rfc/rfc2045.txt">RFC 2045</a>.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.DecodeBase64Builder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.DropRecordBuilder -->
  <class name="DropRecordBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="DropRecordBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that silently consumes records without ever emitting any record - think /dev/null.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.DropRecordBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.EqualsBuilder -->
  <class name="EqualsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="EqualsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that succeeds if all field values of the given named fields are equal to the the given
 values, and fails otherwise.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.EqualsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.ExtractURIComponentsBuilder -->
  <class name="ExtractURIComponentsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ExtractURIComponentsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A command that extracts subcomponents from the URIs contained in the given input field and
 appends them to output fields with the given prefix, namely scheme, authority, host, port, path,
 query, fragment, schemeSpecificPart, userInfo.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.ExtractURIComponentsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.ExtractURIQueryParametersBuilder -->
  <class name="ExtractURIQueryParametersBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ExtractURIQueryParametersBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A command that extracts the query parameters with a given name from the URIs contained in the
 given input field and appends them to the given output field.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.ExtractURIQueryParametersBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.FindReplaceBuilder -->
  <class name="FindReplaceBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="FindReplaceBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that examines each string value in a given field and replaces each substring of the string value
 that matches the given string literal or grok pattern with the given replacement.
 
 This command also supports grok dictionaries in the same way as the {@link GrokBuilder}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.FindReplaceBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.GenerateUUIDBuilder -->
  <class name="GenerateUUIDBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="GenerateUUIDBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <field name="FIELD_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PRESERVE_EXISTING_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <field name="PREFIX_NAME" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
    </field>
    <doc>
    <![CDATA[A command that sets a universally unique identifier on all records that are intercepted. By
 default this event header is named "id".]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.GenerateUUIDBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.GrokBuilder -->
  <class name="GrokBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="GrokBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[The Grok command uses regular expression pattern matching to extract structured fields from
 unstructured log data.
 <p>
 It is perfect for syslog logs, apache and other webserver logs, mysql logs, and in general, any
 log format that is generally written for humans and not computer consumption.
 <p>
 A grok command can load zero or more dictionaries. A dictionary is a file or string that contains
 zero or more REGEX_NAME to REGEX mappings, one per line, separated by space, for example:
 
 <pre>
 INT (?:[+-]?(?:[0-9]+))
 HOSTNAME \b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)
 </pre>
 
 For example, the regex named "INT" is associated with the pattern <code>[+-]?(?:[0-9]+)</code>
 and matches strings like "123" and the regex named "HOSTNAME" is associated with the pattern
 <code>\b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)</code>
 and matches strings like "www.google.com".
 <p>
 A grok command can contain zero or more grok expressions. Each grok expression refers to a record
 input field name and can contain zero or more grok patterns. Here is an example grok expression
 that refers to the input field named "message" and contains two grok patterns:
 
 <pre>
 expressions : {
   message : """\s+%{INT:pid} %{HOSTNAME:my_name_servers}"""
 }
 </pre>
 
 The syntax for a grok pattern is %{REGEX_NAME:GROUP_NAME}, for example %{INT:pid} or
 %{HOSTNAME:my_name_servers}
 <p>
 The REGEX_NAME is the name of a regex within a loaded dictionary.
 <p>
 The GROUP_NAME is the name of an output field.
 <p>
 If <b>all</b> expressions of the grok command match the input record, then the command succeeds
 and the content of the named capturing group will be added to this output field of the output
 record. Otherwise, the record remains unchanged and the grok command fails (which causes
 backtracking of the command chain).
 <p>
 In addition, the grok command supports the following parameters:
 <p>
 <ul>
 <li>dictionaryFiles (String[]): A list of zero or more local files or directory trees from which
 to load dictionaries. Defaults to the empty list.</li>
 
 <li>dictionaryString (String): An optional inline string from which to load a dictionary.</li>
 
 <li>extract (String): Can be "false", "true" or "inplace". Add the content of named capturing
 groups to the input record ("inplace"), or to a copy of the input record ("true") or to no record
 ("false").</li>
 
 <li>numRequiredMatches (String): indicates the minimum and maximum number of field values that
 must match a given grok expression, for each input field name. Can be "atLeastOnce" (default) or
 "once" or "all".</li>
 
 <li>findSubstrings (boolean): indicates whether the grok expression must match the entire input
 field value, or merely a substring within. Defaults to false.</li>
 
 <li>addEmptyStrings (boolean): indicates whether zero length strings stemming from empty (but
 matching) capturing groups shall be added to the output record. Defaults to false.</li>
 </ul>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.GrokBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.IfThenElseBuilder -->
  <class name="IfThenElseBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="IfThenElseBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[An If-Then-Else command consists of a chain of zero or more conditions commands, as well as a
 chain of zero or or more commands that are processed if all conditions succeed ("then commands"),
 as well as a chain of zero or more commands that are processed if one of the conditions fails
 ("else commands").
 
 If one of the commands in the "then" chain or "else" chain fails then the entire "if" command
 fails (and the remaining commands in the "then" or "else" branch are skipped).
 
 Example:
 
 <pre>
         if { 
           conditions : [
 #            { fail {} }
           ]
           then : [
             { logInfo { format : "processing then..." } }
           ]
           else : [
             { logInfo { format : "processing else..." } }
           ]
         }
 </pre>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.IfThenElseBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.JavaBuilder -->
  <class name="JavaBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="JavaBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[The "java" command compiles the given Java code block, wrapped into a Java method with a boolean
 return type and several parameters, along with a Java class definition that contains the given
 import statements.
 <p>
 The parameters passed to the code block are "record", "config", "parent", "child", "context",
 "logger" and are of types Record.class, Config.class, Command.class, Command.class,
 MorphlineContext.class, Logger.class, respectively.
 <p>
 Compilation is done in main memory, i.e. without writing to the filesystem.
 <p>
 The result is an object that can be executed (and reused) any number of times. This is a high
 performance implementation, using an optimized variant of https://scripting.dev.java.net/" (JSR
 223 Java Scripting). Calling {@link #evaluate(Object...)} just means calling
 {@link Method#invoke(Object, Object...)} and as such has the same minimal runtime cost, i.e.
 O(100M calls/sec/core).]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.JavaBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.LogDebugBuilder -->
  <class name="LogDebugBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LogDebugBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that logs to slf4j at DEBUG level.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.LogDebugBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.LogErrorBuilder -->
  <class name="LogErrorBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LogErrorBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that logs to slf4j at ERROR level.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.LogErrorBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.LogInfoBuilder -->
  <class name="LogInfoBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LogInfoBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that logs to slf4j at INFO level.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.LogInfoBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.LogTraceBuilder -->
  <class name="LogTraceBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LogTraceBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that logs to slf4j at TRACE level.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.LogTraceBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.LogWarnBuilder -->
  <class name="LogWarnBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="LogWarnBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that logs to slf4j at WARN level.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.LogWarnBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.NotBuilder -->
  <class name="NotBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="NotBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A Not command consists of one nested command, the boolean return value of which is inverted.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.NotBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.PipeBuilder -->
  <class name="PipeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="PipeBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Factory to create morphline pipe instances.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.PipeBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.SeparateAttachmentsBuilder -->
  <class name="SeparateAttachmentsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="SeparateAttachmentsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that emits one output record for each attachment in the input record's list of
 attachments; The result is a list of records, each of which has at most one attachment.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.SeparateAttachmentsBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.SetValuesBuilder -->
  <class name="SetValuesBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="SetValuesBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[For each input field, set the given record output field to the same values.
 
 That is, first remove all values from the output field, then add new values.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.SetValuesBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.SplitBuilder -->
  <class name="SplitBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="SplitBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that divides strings into substrings, by recognizing a <i>separator</i> (a.k.a.
 "delimiter") which can be expressed as a single character, literal string, regular expression,
 {@link CharMatcher}, or by using a fixed substring length. This class provides the functionality
 of Guava's {@link Splitter} class as a morphline command.
 
 This command also supports grok dictionaries in the same way as the {@link GrokBuilder}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.SplitBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.ToStringBuilder -->
  <class name="ToStringBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ToStringBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that converts the Java objects in a given field via <code>Object.toString()</code> to
 their string representation, and optionally also applies <code>String.trim()</code>.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.ToStringBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.TranslateBuilder -->
  <class name="TranslateBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="TranslateBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that examines each string value in a given field and replaces it with the replacement
 value defined in a given dictionary aka hash table.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.TranslateBuilder -->
  <!-- start class com.cloudera.cdk.morphline.stdlib.TryRulesBuilder -->
  <class name="TryRulesBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="TryRulesBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[A tryRules command consists of zero or more rules.
 
 A rule consists of zero or more commands.
 
 The rules of a tryRules command are processed in top-down order. If one of the commands in a rule
 fails, the tryRules command stops processing of this rule, backtracks and tries the next rule,
 and so on, until a rule is found that runs all its commands to completion without failure (the
 rule succeeds). If a rule succeeds the remaining rules of the current tryRules command are
 skipped. If no rule succeeds the record remains unchanged, but a warning may be issued (the
 warning can be turned off) or an exception may be thrown (which is logged and ignored in
 production mode).
 
 Because a command can itself be a tryRules command, there can be tryRules commands with commands,
 nested inside tryRules, inside tryRules, recursively. This helps to implement arbitrarily complex
 functionality for advanced usage.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.stdlib.TryRulesBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.tika">
  <!-- start class com.cloudera.cdk.morphline.tika.DetectMimeTypeBuilder -->
  <class name="DetectMimeTypeBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="DetectMimeTypeBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that auto-detects the MIME type of the first attachment, if no MIME type is defined yet.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.tika.DetectMimeTypeBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.tika.decompress">
  <!-- start class com.cloudera.cdk.morphline.tika.decompress.DecompressBuilder -->
  <class name="DecompressBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="DecompressBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that decompresses the first attachment. Implementation adapted from Tika CompressorParser.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.tika.decompress.DecompressBuilder -->
  <!-- start class com.cloudera.cdk.morphline.tika.decompress.UnpackBuilder -->
  <class name="UnpackBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="UnpackBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[Command that unpacks the first attachment. Implementation adapted from Tika PackageParser.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.tika.decompress.UnpackBuilder -->
</package>
<package name="com.cloudera.cdk.morphline.twitter">
  <!-- start class com.cloudera.cdk.morphline.twitter.ReadJsonTestTweetsBuilder -->
  <class name="ReadJsonTestTweetsBuilder" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.cdk.morphline.api.CommandBuilder"/>
    <constructor name="ReadJsonTestTweetsBuilder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="build" return="com.cloudera.cdk.morphline.api.Command"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="config" type="com.typesafe.config.Config"/>
      <param name="parent" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="child" type="com.cloudera.cdk.morphline.api.Command"/>
      <param name="context" type="com.cloudera.cdk.morphline.api.MorphlineContext"/>
    </method>
    <doc>
    <![CDATA[JSON parser that extracts search documents from twitter tweets obtained from the twitter 1% sample firehose with the delimited=length option.
 For background see https://dev.twitter.com/docs/api/1.1/get/statuses/sample.
 Example to download data from the twitter 1% sample firehose:
 <pre>
 while [ 1 ]; do echo `date`; curl https://stream.twitter.com/1/statuses/sample.json?delimited=length -u$userName:$password > sample-statuses-$(date +%Y%m%d-%H%M%S); sleep 10; done
 </pre>
 The JSON input format is documented at https://dev.twitter.com/docs/platform-objects/tweets]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.morphline.twitter.ReadJsonTestTweetsBuilder -->
</package>
<package name="com.cloudera.cdk.tools">
  <!-- start class com.cloudera.cdk.tools.CombinedLogFormatConverter -->
  <class name="CombinedLogFormatConverter" extends="org.apache.crunch.util.CrunchTool"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CombinedLogFormatConverter"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="run" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <method name="main"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="args" type="java.lang.String[]"/>
      <exception name="Exception" type="java.lang.Exception"/>
    </method>
    <doc>
    <![CDATA[A tool for converting files in
 <a href="http://en.wikipedia.org/wiki/Common_Log_Format">Combined Log Format</a> to a
 {@link com.cloudera.cdk.data.Dataset}.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.tools.CombinedLogFormatConverter -->
  <!-- start class com.cloudera.cdk.tools.JobClasspathHelper -->
  <class name="JobClasspathHelper" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JobClasspathHelper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="prepareClasspath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="conf" type="org.apache.hadoop.conf.Configuration"/>
      <param name="libDir" type="org.apache.hadoop.fs.Path"/>
      <param name="classesToInclude" type="java.lang.Class[]"/>
      <exception name="Exception" type="java.lang.Exception"/>
      <doc>
      <![CDATA[@param conf
            Configuration object for the Job. Used to get the FileSystem associated with it.
 @param libDir
            Destination directory in the FileSystem (Usually HDFS) where to upload and look for the libs.
 @param classesToInclude
            Classes that are needed by the job. JarFinder will look for the jar containing these classes.
 @throws Exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 This class is an helper to copy the jars needed by the job in the Distributed cache.
 </p>
 
 <p>
 This tool helps to setup the job classpath at runtime. It allows library sharing between job. That result in faster
 jobs setup (since most of the time the libs are already uploaded in HDFS). Before submitting a job, you use this tool
 to provide the classes that you use in your job.
 </p>
 
 <p>
 The tool will find the jar(s), or will create the jars and upload them to a "library" path in HDFS, and it will
 create an md5 file along the uploaded jar.
 </p>
 
 <p>
 In order to find the jar or creating the job's Jar It use a modified version of org.apache.hadoop.util.JarFinder that
 is found in Hadoop 0.23
 </p>
 
 <p>
 If another job needs the same jar and provide the same "library" path it will discover it and use it, without having
 to lose the time that the upload of the jar would require.
 </p>
 
 <p>
 If the jar does not exist in the "library" path, it will upload it. However, if the jar is already in the "library"
 path, the tool will compute the md5 of the jar and compare with the one found in HDFS, and if there's a difference,
 the jar will be uploaded.
 </p>
 
 <p>
 If it creates a jar (from the classes of the job itself or from the classes in your workspace for example), it will
 upload the created jar to the "library" path and clean them after the JVM exits.
 </p>
 
 <p>
 Here's an example for a job class TestTool.class that requires HashFunction from Guava.
 </p>
 
 <pre>
 {@code
 new JobClasspathHelper().prepareClasspath(getConf(), new Path("/lib/path"), new Class[] { TestTool.class, HashFunction.class});
 }
 </pre>
 
 @author tbussier (tony.bussieres@ticksmith.com)
 @since 0.3.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.cdk.tools.JobClasspathHelper -->
</package>

</api>
