<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Thu Jun 06 17:02:47 BST 2013 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="CDK 0.3.0"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /Users/tom/workspace/cdk/target/checkout/cdk-data/lib/jdiff.jar -classpath /Users/tom/workspace/cdk/target/checkout/cdk-data/target/classes:/Users/tom/.m2/repository/org/apache/hcatalog/hcatalog-core/0.4.0-cdh4.2.1/hcatalog-core-0.4.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/antlr/stringtemplate/3.2.1/stringtemplate-3.2.1.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-json/1.8/jersey-json-1.8.jar:/Users/tom/.m2/repository/org/apache/zookeeper/zookeeper/3.4.5-cdh4.2.1/zookeeper-3.4.5-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-server-common/2.0.0-cdh4.2.1/hadoop-yarn-server-common-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-net/commons-net/3.1/commons-net-3.1.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-http-servlet/2.1.1/grizzly-http-servlet-2.1.1.jar:/Users/tom/.m2/repository/com/google/inject/guice/3.0/guice-3.0.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-hs/2.0.0-cdh4.2.1/hadoop-mapreduce-client-hs-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/datanucleus/datanucleus-rdbms/2.0.3/datanucleus-rdbms-2.0.3.jar:/Users/tom/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.8.8/jackson-core-asl-1.8.8.jar:/Users/tom/.m2/repository/com/twitter/parquet-format/1.0.0-SNAPSHOT/parquet-format-1.0.0-SNAPSHOT.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-annotations/2.0.0-cdh4.2.1/hadoop-annotations-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/thrift/libthrift/0.9.0/libthrift-0.9.0.jar:/Users/tom/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/Users/tom/.m2/repository/com/google/inject/extensions/guice-servlet/3.0/guice-servlet-3.0.jar:/Users/tom/.m2/repository/commons-configuration/commons-configuration/1.6/commons-configuration-1.6.jar:/Users/tom/.m2/repository/org/apache/hive/hive-builtins/0.10.0-cdh4.2.1/hive-builtins-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-pool/commons-pool/1.5.4/commons-pool-1.5.4.jar:/Users/tom/.m2/repository/com/twitter/parquet-column/1.0.0-SNAPSHOT/parquet-column-1.0.0-SNAPSHOT.jar:/Users/tom/.m2/repository/javax/jdo/jdo2-api/2.3-ec/jdo2-api-2.3-ec.jar:/Users/tom/.m2/repository/com/googlecode/javaewah/JavaEWAH/0.3.2/JavaEWAH-0.3.2.jar:/Users/tom/.m2/repository/org/apache/httpcomponents/httpclient/4.1.3/httpclient-4.1.3.jar:/Users/tom/.m2/repository/javax/servlet/jsp/jsp-api/2.1/jsp-api-2.1.jar:/Users/tom/.m2/repository/com/linkedin/haivvreo/1.0.7-cdh-4/haivvreo-1.0.7-cdh-4.jar:/Users/tom/.m2/repository/javax/servlet/servlet-api/2.5/servlet-api-2.5.jar:/Users/tom/.m2/repository/org/apache/hive/hive-serde/0.10.0-cdh4.2.1/hive-serde-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-client/1.8/jersey-client-1.8.jar:/Users/tom/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-http/2.1.1/grizzly-http-2.1.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-client/2.0.0-cdh4.2.1/hadoop-yarn-client-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/sun/jersey/contribs/jersey-guice/1.8/jersey-guice-1.8.jar:/Users/tom/.m2/repository/com/twitter/parquet-avro/1.0.0-SNAPSHOT/parquet-avro-1.0.0-SNAPSHOT.jar:/Users/tom/.m2/repository/commons-dbcp/commons-dbcp/1.4/commons-dbcp-1.4.jar:/Users/tom/.m2/repository/org/slf4j/slf4j-log4j12/1.7.2/slf4j-log4j12-1.7.2.jar:/Users/tom/.m2/repository/com/jcraft/jsch/0.1.42/jsch-0.1.42.jar:/Users/tom/.m2/repository/commons-lang/commons-lang/2.5/commons-lang-2.5.jar:/Users/tom/.m2/repository/javax/xml/bind/jaxb-api/2.2.2/jaxb-api-2.2.2.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-common/2.0.0-cdh4.2.1/hadoop-common-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-core/1.8/jersey-core-1.8.jar:/Users/tom/.m2/repository/org/apache/commons/commons-math/2.1/commons-math-2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-common/2.0.0-cdh4.2.1/hadoop-mapreduce-client-common-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/httpcomponents/httpcore/4.1.3/httpcore-4.1.3.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-common/2.0.0-cdh4.2.1/hadoop-yarn-common-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/Users/tom/.m2/repository/org/xerial/snappy/snappy-java/1.0.4.1/snappy-java-1.0.4.1.jar:/Users/tom/.m2/repository/org/antlr/ST4/4.0.4/ST4-4.0.4.jar:/Users/tom/.m2/repository/commons-daemon/commons-daemon/1.0.3/commons-daemon-1.0.3.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-shuffle/2.0.0-cdh4.2.1/hadoop-mapreduce-client-shuffle-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/google/guava/guava/14.0/guava-14.0.jar:/Users/tom/.m2/repository/org/datanucleus/datanucleus-core/2.0.3/datanucleus-core-2.0.3.jar:/Users/tom/.m2/repository/org/tukaani/xz/1.0/xz-1.0.jar:/Users/tom/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-rcm/2.1.1/grizzly-rcm-2.1.1.jar:/Users/tom/.m2/repository/org/codehaus/jackson/jackson-jaxrs/1.7.1/jackson-jaxrs-1.7.1.jar:/Users/tom/.m2/repository/stax/stax-api/1.0.1/stax-api-1.0.1.jar:/Users/tom/.m2/repository/com/twitter/parquet-hadoop/1.0.0-SNAPSHOT/parquet-hadoop-1.0.0-SNAPSHOT.jar:/Users/tom/.m2/repository/org/codehaus/jettison/jettison/1.1/jettison-1.1.jar:/Users/tom/.m2/repository/net/sf/kosmosfs/kfs/0.3/kfs-0.3.jar:/Users/tom/.m2/repository/com/google/protobuf/protobuf-java/2.4.0a/protobuf-java-2.4.0a.jar:/Users/tom/.m2/repository/org/apache/commons/commons-compress/1.4.1/commons-compress-1.4.1.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-server/1.8/jersey-server-1.8.jar:/Users/tom/.m2/repository/org/antlr/antlr-runtime/3.4/antlr-runtime-3.4.jar:/Users/tom/.m2/repository/org/apache/avro/trevni-avro/1.7.4/trevni-avro-1.7.4.jar:/Users/tom/.m2/repository/org/mortbay/jetty/jetty/6.1.26.cloudera.2/jetty-6.1.26.cloudera.2.jar:/Users/tom/.m2/repository/org/apache/avro/avro-mapred/1.7.4/avro-mapred-1.7.4.jar:/Users/tom/.m2/repository/org/glassfish/external/management-api/3.0.0-b012/management-api-3.0.0-b012.jar:/Users/tom/.m2/repository/javax/transaction/jta/1.1/jta-1.1.jar:/Users/tom/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar:/Users/tom/.m2/repository/org/apache/hive/hive-common/0.10.0-cdh4.2.1/hive-common-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hive/hive-exec/0.10.0-cdh4.2.1/hive-exec-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/datanucleus/datanucleus-enhancer/2.0.3/datanucleus-enhancer-2.0.3.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-grizzly2/1.8/jersey-grizzly2-1.8.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-test-framework/jersey-test-framework-core/1.8/jersey-test-framework-core-1.8.jar:/Users/tom/.m2/repository/net/java/dev/jets3t/jets3t/0.6.1/jets3t-0.6.1.jar:/Users/tom/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/Users/tom/.m2/repository/com/sun/jersey/jersey-test-framework/jersey-test-framework-grizzly2/1.8/jersey-test-framework-grizzly2-1.8.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-server-tests/2.0.0-cdh4.2.1/hadoop-yarn-server-tests-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-server-web-proxy/2.0.0-cdh4.2.1/hadoop-yarn-server-web-proxy-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/google/code/findbugs/jsr305/2.0.1/jsr305-2.0.1.jar:/Users/tom/.m2/repository/xmlenc/xmlenc/0.52/xmlenc-0.52.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-server-resourcemanager/2.0.0-cdh4.2.1/hadoop-yarn-server-resourcemanager-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/antlr/antlr/3.4/antlr-3.4.jar:/Users/tom/.m2/repository/commons-el/commons-el/1.0/commons-el-1.0.jar:/Users/tom/.m2/repository/jline/jline/0.9.94/jline-0.9.94.jar:/Users/tom/.m2/repository/org/glassfish/javax.servlet/3.0/javax.servlet-3.0.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-server-nodemanager/2.0.0-cdh4.2.1/hadoop-yarn-server-nodemanager-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/avro/trevni-core/1.7.4/trevni-core-1.7.4.jar:/Users/tom/.m2/repository/org/mortbay/jetty/jetty-util/6.1.26.cloudera.2/jetty-util-6.1.26.cloudera.2.jar:/Users/tom/.m2/repository/org/slf4j/slf4j-api/1.7.2/slf4j-api-1.7.2.jar:/Users/tom/.m2/repository/org/jboss/netty/netty/3.2.4.Final/netty-3.2.4.Final.jar:/Users/tom/.m2/repository/org/codehaus/jackson/jackson-xc/1.7.1/jackson-xc-1.7.1.jar:/Users/tom/.m2/repository/commons-beanutils/commons-beanutils-core/1.8.0/commons-beanutils-core-1.8.0.jar:/Users/tom/.m2/repository/org/apache/hive/hive-cli/0.10.0-cdh4.2.1/hive-cli-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/thrift/libfb303/0.9.0/libfb303-0.9.0.jar:/Users/tom/.m2/repository/org/apache/derby/derby/10.4.2.0/derby-10.4.2.0.jar:/Users/tom/.m2/repository/org/apache/hive/hive-metastore/0.10.0-cdh4.2.1/hive-metastore-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-framework/2.1.1/grizzly-framework-2.1.1.jar:/Users/tom/.m2/repository/org/mockito/mockito-all/1.8.5/mockito-all-1.8.5.jar:/Users/tom/.m2/repository/com/sun/xml/bind/jaxb-impl/2.2.3-1/jaxb-impl-2.2.3-1.jar:/Users/tom/.m2/repository/org/apache/hive/hive-service/0.10.0-cdh4.2.1/hive-service-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-yarn-api/2.0.0-cdh4.2.1/hadoop-yarn-api-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-jobclient/2.0.0-cdh4.2.1/hadoop-mapreduce-client-jobclient-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/com/google/code/findbugs/annotations/2.0.1/annotations-2.0.1.jar:/Users/tom/.m2/repository/com/thoughtworks/paranamer/paranamer/2.3/paranamer-2.3.jar:/Users/tom/.m2/repository/commons-io/commons-io/2.1/commons-io-2.1.jar:/Users/tom/.m2/repository/tomcat/jasper-runtime/5.5.23/jasper-runtime-5.5.23.jar:/Users/tom/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.8.8/jackson-mapper-asl-1.8.8.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-archives/2.0.0-cdh4.2.1/hadoop-archives-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar:/Users/tom/.m2/repository/commons-digester/commons-digester/1.8/commons-digester-1.8.jar:/Users/tom/.m2/repository/org/apache/avro/avro/1.7.3/avro-1.7.3.jar:/Users/tom/.m2/repository/org/apache/hive/hive-contrib/0.10.0-cdh4.2.1/hive-contrib-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar:/Users/tom/.m2/repository/org/glassfish/gmbal/gmbal-api-only/3.0.0-b023/gmbal-api-only-3.0.0-b023.jar:/Users/tom/.m2/repository/org/apache/hive/hive-shims/0.10.0-cdh4.2.1/hive-shims-0.10.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-auth/2.0.0-cdh4.2.1/hadoop-auth-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/javassist/javassist/3.16.1-GA/javassist-3.16.1-GA.jar:/Users/tom/.m2/repository/org/json/json/20090211/json-20090211.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-core/2.0.0-cdh4.2.1/hadoop-mapreduce-client-core-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-mapreduce-client-app/2.0.0-cdh4.2.1/hadoop-mapreduce-client-app-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/Users/tom/.m2/repository/org/datanucleus/datanucleus-connectionpool/2.0.3/datanucleus-connectionpool-2.0.3.jar:/Users/tom/.m2/repository/org/apache/crunch/crunch-core/0.6.0-cdh4.2.0/crunch-core-0.6.0-cdh4.2.0.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-http-server/2.1.1/grizzly-http-server-2.1.1.jar:/Users/tom/.m2/repository/org/apache/commons/commons-jexl/2.1.1/commons-jexl-2.1.1.jar:/Users/tom/.m2/repository/asm/asm/3.1/asm-3.1.jar:/Users/tom/.m2/repository/org/glassfish/grizzly/grizzly-framework/2.1.1/grizzly-framework-2.1.1-tests.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-hdfs/2.0.0-cdh4.2.1/hadoop-hdfs-2.0.0-cdh4.2.1.jar:/Users/tom/.m2/repository/commons-codec/commons-codec/1.4/commons-codec-1.4.jar:/Users/tom/.m2/repository/org/apache/hadoop/hadoop-client/2.0.0-cdh4.2.1/hadoop-client-2.0.0-cdh4.2.1.jar -encoding UTF-8 -overview /Users/tom/workspace/cdk/target/checkout/cdk-data/src/main/javadoc/overview.html -protected -sourcepath /Users/tom/workspace/cdk/target/checkout/cdk-data/src/main/java:/Users/tom/workspace/cdk/target/checkout/cdk-data/target/generated-sources/avro:/Users/tom/workspace/cdk/target/checkout/cdk-data/src/main/javadoc -apiname CDK 0.3.0 -->
<package name="com.cloudera.data">
  <!-- start interface com.cloudera.data.Dataset -->
  <interface name="Dataset"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the name of a {@code Dataset}. No guarantees about the format of this
 name are made.]]>
      </doc>
    </method>
    <method name="getDescriptor" return="com.cloudera.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the {@link DatasetDescriptor} associated with this dataset.]]>
      </doc>
    </method>
    <method name="getPartition" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="com.cloudera.data.PartitionKey"/>
      <param name="autoCreate" type="boolean"/>
      <doc>
      <![CDATA[Get a partition for a {@link PartitionKey}, possibly creating the partition
 if it doesn't already exist. A {@link PartitionKey} may be obtained using
 {@link PartitionStrategy#partitionKey(Object...)} or
 {@link PartitionStrategy#partitionKeyForEntity(Object)}.

 @param key        The key used to look up the partition.
 @param autoCreate If true, automatically create the partition if doesn't exist,
 @throws DatasetException]]>
      </doc>
    </method>
    <method name="dropPartition"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="com.cloudera.data.PartitionKey"/>
      <doc>
      <![CDATA[Drop a partition for a {@link PartitionKey}. Dropping a partition that
 doesn't exist results in a {@link DatasetException} being thrown.

 @param key The key used to look up the partition.
 @throws DatasetException
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="getWriter" return="com.cloudera.data.DatasetWriter&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get an appropriate {@link DatasetWriter} implementation based on the
 underlying {@code Dataset} implementation.
 </p>
 <p>
 Implementations are free to return different types of writers depending on
 the disposition of the data. For example, a partitioned dataset may use a
 different writer than that of a non-partitioned dataset. Clients should not
 make any assumptions about the returned implementations. {@link Dataset}
 implementations are free to change them at any time.
 </p>

 @throws DatasetException]]>
      </doc>
    </method>
    <method name="getReader" return="com.cloudera.data.DatasetReader&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get an appropriate {@link DatasetReader} implementation based on the
 underlying {@code Dataset} implementation.
 </p>
 <p>
 Implementations are free to return different types of readers depending on
 the disposition of the data. For example, a partitioned dataset may use a
 different reader than that of a non-partitioned dataset. Clients should not
 make any assumptions about the returned implementations. {@code Dataset}
 implementations are free to change them at any time.
 </p>

 @throws DatasetException]]>
      </doc>
    </method>
    <method name="getPartitions" return="java.lang.Iterable&lt;com.cloudera.data.Dataset&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Return partitions, if this dataset is partitioned.
 </p>
 <p>
 Note that, depending on the implementation, the returned iterable may hold
 system resources until exhausted and/or finalized.
 </p>

 @return an iterable over all partitions of this dataset
 @throws DatasetException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A logical representation of a set of data entities.
 </p>
 <p>
 Logically, all datasets have two generic properties: a name, and a descriptor
 that holds information such as the dataset's schema and its partitioning
 information. Concrete implementations of {@code Dataset} may support
 additional properties, mandatory or otherwise, as needed. {@code Dataset}s
 are not normally instantiated directly, but managed by a repository (also
 implementation-specific).
 </p>
 <p>
 Implementations of {@link Dataset} are immutable.
 </p>

 @see DatasetRepository
 @see DatasetWriter
 @see DatasetReader
 @see PartitionStrategy
 @see DatasetDescriptor
 @see Schema]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.data.Dataset -->
  <!-- start class com.cloudera.data.DatasetDescriptor -->
  <class name="DatasetDescriptor" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetDescriptor" type="org.apache.avro.Schema, com.cloudera.data.PartitionStrategy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an instance of this class with the supplied {@link Schema},
 and optional {@link PartitionStrategy}. The default {@link Format},
 {@link Formats#AVRO}, will be used.]]>
      </doc>
    </constructor>
    <method name="getSchema" return="org.apache.avro.Schema"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the associated {@link Schema}. Depending on the underlying storage
 system, this schema may be simple (i.e. records made up of only scalar
 types) or complex (i.e. containing other records, lists, and so on).
 Validation of the supported schemas is performed by the managing
 repository, not the dataset or descriptor itself.

 @return the schema]]>
      </doc>
    </method>
    <method name="getSchemaUrl" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get a URL from which the {@link Schema} may be retrieved. Optional. This method
 may return <code>null</code> if the schema is not stored at a persistent URL,
 e.g. if it was constructed from a literal string.

 @return a URL from which the schema may be retrieved
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="getFormat" return="com.cloudera.data.Format"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the associated {@link Format} that the data is stored in.

 @return the format
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="getPartitionStrategy" return="com.cloudera.data.PartitionStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the {@link PartitionStrategy}, if this dataset is partitioned. Calling
 this method on a non-partitioned dataset is an error. Instead, use the
 {@link #isPartitioned()} method prior to invocation.]]>
      </doc>
    </method>
    <method name="isPartitioned" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns true if an associated dataset is partitioned (that is, has an
 associated {@link PartitionStrategy}, false otherwise.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The structural definition of a {@link Dataset}.
 </p>
 <p>
 Each {@code Dataset} has an associated {@link Schema} and optional
 {@link PartitionStrategy} defined at the time of creation. Instances of this
 class are used to hold this information. Users are strongly encouraged to use
 the inner {@link Builder} to create new instances.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetDescriptor -->
  <!-- start class com.cloudera.data.DatasetDescriptor.Builder -->
  <class name="DatasetDescriptor.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.data.DatasetDescriptor&gt;"/>
    <constructor name="DatasetDescriptor.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="schema" type="org.apache.avro.Schema"/>
      <doc>
      <![CDATA[Configure the dataset's schema. A schema is required, and may be set
 using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link File}. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from an {@link InputStream}. It is the
 caller's responsibility to close the {@link InputStream}. A schema is
 required, and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link URI}. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure the dataset's schema from a {@link String}. A schema is
 required, and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="schema" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Configure the dataset's schema via a Java class type. A schema is required,
 and may be set using one of the <code>schema</code> or
 <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="file" type="java.io.File"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. A schema is required, and may be set using one of the
 <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. It is the caller's responsibility to close the
 {@link InputStream}. A schema is required, and may be set using one of
 the <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="schemaFromAvroDataFile" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Configure the dataset's schema by using the schema from an existing Avro
 data file. A schema is required, and may be set using one of the
 <code>schema</code> or <code>schemaFromAvroDataFile</code> methods.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="format" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="format" type="com.cloudera.data.Format"/>
      <doc>
      <![CDATA[Configure the dataset's format. Optional. If not specified {@link Formats#AVRO}
 is used by default.

 @return An instance of the builder for method chaining.
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="partitionStrategy" return="com.cloudera.data.DatasetDescriptor.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="partitionStrategy" type="com.cloudera.data.PartitionStrategy"/>
      <doc>
      <![CDATA[Configure the dataset's partitioning strategy. Optional.

 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get an instance of the configured dataset descriptor. Subsequent calls
 will produce new instances that are similarly configure.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link DatasetDescriptor}s.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetDescriptor.Builder -->
  <!-- start class com.cloudera.data.DatasetException -->
  <class name="DatasetException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset-related failures.
 </p>
 <p>
 Implementations of the {@link Dataset} interface throw this exception if
 any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see Dataset
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetException -->
  <!-- start interface com.cloudera.data.DatasetReader -->
  <interface name="DatasetReader"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="open"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Open the reader, allocating any necessary resources required to produce
 entities.
 </p>
 <p>
 This method <strong>must</strong> be invoked prior to any calls of
 {@link #hasNext()} or {@link #read()}.
 </p>

 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="hasNext" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Tests the reader to see if additional entities can be read.

 @return true if additional entities exist, false otherwise.
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="read" return="E"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Fetch the next entity from the reader.
 </p>
 <p>
 Calling this method when no additional data exists is illegal; users should
 use {@link #hasNext()} to test if a call to {@code read()} will succeed.
 Implementations of this method may block.
 </p>

 @return An entity of type {@code E}.
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Close the reader and release any system resources.
 </p>
 <p>
 No further operations of this interface (other than additional calls of
 this method) may be performed, however implementations may choose to permit
 other method calls. See implementation documentation for details.
 </p>

 @throws DatasetReaderException]]>
      </doc>
    </method>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A stream-oriented dataset reader.
 </p>
 <p>
 Subsystem-specific implementations of this interface are used to read data
 from a {@link Dataset}. Readers are use-once objects that produce entities of
 type {@code E}. Normally, users are not expected to instantiate
 implementations directly. Instead, use the containing dataset's
 {@link Dataset#getReader()} method to get an appropriate implementation.
 Normally, users receive an instance of this interface from a dataset, call
 {@link #open()} to prepare for IO operations, invoke {@link #hasNext()} and
 {@link #read()} as necessary, and {@link #close()} when they are done or no
 more data exists.
 </p>
 <p>
 Implementations may hold system resources until the {@link #close()} method
 is called, so users <strong>must</strong> follow the normal try / finally
 pattern to ensure these resources are properly freed when the reader is
 exhausted or no longer useful. Do not rely on implementations automatically
 invoking the {@code close()} method upon object finalization (although
 implementations are free to do so, if they choose). All implementations must
 silently ignore multiple invocations of {@code close()} as well as a close of
 an unopened reader.
 </p>
 <p>
 If any method throws an exception, the reader is no longer valid, and the
 only method that may be subsequently called is {@code close()}.
 </p>
 <p>
 Implementations of {@link DatasetReader} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>

 @param <E> The type of entity produced by this reader.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.data.DatasetReader -->
  <!-- start class com.cloudera.data.DatasetReaderException -->
  <class name="DatasetReaderException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetReaderException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetReaderException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset reader-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetReader} interface throw this exception
 if any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see DatasetReader
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetReaderException -->
  <!-- start interface com.cloudera.data.DatasetRepository -->
  <interface name="DatasetRepository"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="get" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Get the latest version of a named {@link Dataset}. If no dataset with the
 provided {@code name} exists, a {@link DatasetRepositoryException} is thrown.

 @param name The name of the dataset.
 @throws DatasetRepositoryException]]>
      </doc>
    </method>
    <method name="create" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Create a {@link Dataset} with the supplied {@code descriptor}. Depending on
 the underlying dataset storage, some schemas types or configurations may
 not be supported. If an illegal schema is supplied, an exception will be
 thrown by the implementing class. It is illegal to create a more than one
 dataset with a given name. If a duplicate name is provided, an exception is
 thrown.

 @param name       The fully qualified dataset name
 @param descriptor A descriptor that describes the schema and other properties of the
                   dataset
 @return The newly created dataset
 @throws DatasetRepositoryException]]>
      </doc>
    </method>
    <method name="update" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Update an existing {@link Dataset} to reflect the supplied {@code descriptor}. The
 common case is updating a dataset schema. Depending on
 the underlying dataset storage, some updates may not be supported,
 such as a change in format or partition strategy.
 Any attempt to make an unsupported or incompatible update will result in an
 exception being thrown and no change being made to the dataset.

 @param name       The fully qualified dataset name
 @param descriptor A descriptor that describes the schema and other properties of the
                   dataset
 @return The newly created dataset
 @throws DatasetRepositoryException
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Drop the named {@link Dataset}. If no dataset with the
 provided {@code name} exists, a {@link DatasetReaderException} is thrown.

 @param name The name of the dataset.
 @return <code>true</code> if the dataset was successfully dropped, false otherwise
 @throws DatasetReaderException]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A logical repository (storage system) of {@link Dataset}s.
 </p>
 <p>
 Implementations of {@code DatasetRepository} are storage systems that contain
 zero or more {@link Dataset}s. A repository acts as a factory, as well as a
 registry, of datasets. Users can {@link #create(String, DatasetDescriptor)} a
 new {@link Dataset} with a name and schema, or retrieve a handle to an
 existing dataset, by name, by way of the {@link #get(String)} method. While
 not expressly forbidden, most repositories are expected to support only a
 single concrete {@link Dataset} implementation.
 </p>
 <p>
 No guarantees are made as to the durability, reliability, or availability of
 the underlying storage. That is, a {@code DatasetRepository} could be on
 disk, in memory, or some combination. See the implementation class for
 details about the guarantees it provides.
 </p>
 <p>
 Implementations of {@link DatasetRepository} are immutable.
 </p>

 @see Dataset
 @see DatasetDescriptor]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.data.DatasetRepository -->
  <!-- start class com.cloudera.data.DatasetRepositoryException -->
  <class name="DatasetRepositoryException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetRepositoryException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetRepositoryException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset repository-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetRepository} interface throw this
 exception if any of their operations fail. This is a runtime (unchecked)
 exception.
 </p>

 @see DatasetRepository
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetRepositoryException -->
  <!-- start interface com.cloudera.data.DatasetWriter -->
  <interface name="DatasetWriter"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="open"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Open the writer, allocating any necessary resources required to store
 entities.
 </p>
 <p>
 This method <strong>must</strong> be invoked prior to any calls of
 {@link #write(Object)} or {@link #flush()}.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="E"/>
      <doc>
      <![CDATA[<p>
 Writer an entity of type {@code E} to the associated dataset.
 </p>
 <p>
 Implementations may buffer entities internally (see the {@link #flush()}
 method). All instances of {@code entity} must conform to the dataset's
 schema and partition. If they don't, implementations should throw an exception,
 although this is not required.
 </p>

 @param entity The entity to write
 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Force or commit any outstanding data to storage.
 </p>
 </p>
 <p>
 Implementations of this interface must declare their durability guarantees.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Close the writer and release any system resources.
 </p>
 <p>
 No further operations of this interface (other than additional calls to
 this method) may be performed, however implementations may choose to permit
 other method calls. See implementation documentation for details.
 </p>

 @throws DatasetWriterException]]>
      </doc>
    </method>
    <method name="isOpen" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A stream-oriented dataset writer.
 </p>
 <p>
 Subsystem-specific implementations of this interface are used to write data
 to a {@link Dataset}. Writers are use-once objects that serialize entities of
 type {@code E} and write them to the underlying system. Normally, users are
 not expected to instantiate implementations directly. Instead, use the
 containing dataset's {@link Dataset#getWriter()} method to get an appropriate
 implementation. Users should receive an instance of this interface from a
 dataset, call {@link #open()} to prepare for IO operations, invoke
 {@link #write(Object)} and {@link #flush()} as necessary, and
 {@link #close()} when they are done, or no more data exists.
 </p>
 <p>
 Implementations may hold system resources until the {@link #close()} method
 is called, so users <strong>must</strong> follow the normal try / finally
 pattern to ensure these resources are properly freed when the writer is no
 longer needed. Do not rely on implementations automatically invoking the
 {@code close()} method upon object finalization (implementations must not do
 so). All implementations must silently ignore multiple invocations of
 {@code close()} as well as a close of an unopened writer.
 </p>
 <p>
 If any method throws an exception, the writer is no longer valid, and the
 only method that may be subsequently called is {@code close()}.
 </p>
 <p>
 Implementations of {@link DatasetWriter} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>

 @param <E> The type of entity accepted by this writer.]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.data.DatasetWriter -->
  <!-- start class com.cloudera.data.DatasetWriterException -->
  <class name="DatasetWriterException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DatasetWriterException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="DatasetWriterException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for dataset writer-related failures.
 </p>
 <p>
 Implementations of the {@link DatasetWriter} interface throw this exception
 if any of their operations fail. This is a runtime (unchecked) exception.
 </p>

 @see DatasetWriter
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.DatasetWriterException -->
  <!-- start class com.cloudera.data.FieldPartitioner -->
  <class name="FieldPartitioner" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Function&lt;java.lang.Object, java.lang.Object&gt;"/>
    <constructor name="FieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <constructor name="FieldPartitioner" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the partition field. Note that the partition field is derived
 from {@link #getSourceName()} and does not appear in the dataset entity.]]>
      </doc>
    </method>
    <method name="getSourceName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the name of the field from which the partition field is derived.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="getCardinality" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the number of buckets in the partition.]]>
      </doc>
    </method>
    <method name="apply" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[<p>
 Apply the partition function to the given {@code value}.
 </p>
 <p>
 The type of value must be compatible with the field partitioner
 implementation. Normally, this is validated at the time of initial
 configuration rather than at runtime.
 </p>]]>
      </doc>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
      <doc>
      <![CDATA[<p>
 Retrieve the value for the field from the string representation.
 </p>
 @since 0.3.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 Partitions values for a named field.
 </p>
 <p>
 Used by a {@link PartitionStrategy} to calculate which partition an entity
 belongs in, based on the value of a given field, called the source field. A field
 partitioner can, in some cases, provide meaningful cardinality hints to query
 systems. A good example of this is a hash partitioner which always knows the number of
 buckets produced by the function.
 </p>
 <p>
 Implementations of {@link FieldPartitioner} are immutable.
 </p>
 
 @see PartitionStrategy]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.FieldPartitioner -->
  <!-- start class com.cloudera.data.Format -->
  <class name="Format" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the format's name.
 @return the name]]>
      </doc>
    </method>
    <method name="getExtension" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Get the extension for use in filenames. A dot is not included as a part of the
 extension.
 @return the extension]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The data format used for encoding the data in a {@link Dataset} when stored in a
 {@link DatasetRepository}.
 </p>
 <p>
 There are a small number of formats provided, the default is {@link Formats#AVRO},
 which will be used when no format is explicitly configured.
 </p>

 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.Format -->
  <!-- start class com.cloudera.data.Formats -->
  <class name="Formats" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <field name="AVRO" type="com.cloudera.data.Format"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[AVRO: the
 <a href="http://avro.apache.org/docs/current/spec.html#Object+Container+Files">Avro
 row-oriented format</a>]]>
      </doc>
    </field>
    <field name="PARQUET" type="com.cloudera.data.Format"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[PARQUET: the <a href="http://parquet.io/">Parquet columnar format</a>]]>
      </doc>
    </field>
    <doc>
    <![CDATA[<p>
 Contains constant definitions for the standard {@link Format} instances supported
 by the library. {@link #AVRO} is the default format.
 </p>

 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.Formats -->
  <!-- start interface com.cloudera.data.MetadataProvider -->
  <interface name="MetadataProvider"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="load" return="com.cloudera.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Load the dataset descriptor for the dataset {@code name}.

 @param name The fully qualified name of an existing dataset.
 @return A dataset descriptor.
 @throws MetadataProviderException If the dataset doesn't exist or the descriptor can not be loaded.]]>
      </doc>
    </method>
    <method name="save"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
      <doc>
      <![CDATA[Save the dataset descriptor for the dataset {@code name}.

 @param name       The fully qualified name of a dataset.
 @param descriptor A dataset descriptor.
 @throws MetadataProviderException If the dataset descriptor can not be saved.]]>
      </doc>
    </method>
    <method name="delete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Delete all metadata associated with the dataset named {@code name}.

 @param name The fully qualified name of a dataset.
 @return True if the dataset is successfully deleted, false if the dataset
         doesn't exist.
 @throws MetadataProviderException If the dataset metadata exists but can not be deleted.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 Defines a service provider interface for metadata system plugins.
 </p>
 <p>
 Implementations of {@link DatasetRepository} are written against this
 interface and, by extension, can store dataset metadata information contained
 in the {@link DatasetDescriptor} in a system of the user's choosing.
 </p>
 <p>
 Implementations of {@link MetadataProvider} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>]]>
    </doc>
  </interface>
  <!-- end interface com.cloudera.data.MetadataProvider -->
  <!-- start class com.cloudera.data.MetadataProviderException -->
  <class name="MetadataProviderException" extends="java.lang.RuntimeException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MetadataProviderException"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.String, java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MetadataProviderException" type="java.lang.Throwable"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <doc>
    <![CDATA[<p>
 Exception thrown for metadata provider-related failures.
 </p>
 <p>
 Implementations of the {@link MetadataProvider} interface throw this
 exception if any of their operations fail. This is a runtime (unchecked)
 exception.
 </p>

 @see MetadataProvider
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.MetadataProviderException -->
  <!-- start class com.cloudera.data.PartitionKey -->
  <class name="PartitionKey" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getValues" return="java.util.List&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Return the value at the specified index in the key.]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Return the number of values in the key.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A key for retrieving partitions from a {@link Dataset}.
 </p>
 <p>
 A {@code PartitionKey} is a ordered sequence of values corresponding to the
 {@link FieldPartitioner}s in a {@link PartitionStrategy}. A
 {@link PartitionKey} may be obtained using
 {@link PartitionStrategy#partitionKey(Object...)} or
 {@link PartitionStrategy#partitionKeyForEntity(Object)}.
 </p>
 <p>
 Implementations of {@link PartitionKey} are typically not thread-safe; that is,
 the behavior when accessing a single instance from multiple threads is undefined.
 </p>
 
 @see PartitionStrategy
 @see FieldPartitioner
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.PartitionKey -->
  <!-- start class com.cloudera.data.PartitionStrategy -->
  <class name="PartitionStrategy" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PartitionStrategy" type="com.cloudera.data.FieldPartitioner[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a partition strategy with a variadic array of field partitioners.]]>
      </doc>
    </constructor>
    <constructor name="PartitionStrategy" type="java.util.List&lt;com.cloudera.data.FieldPartitioner&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a partition strategy with a list of field partitioners.]]>
      </doc>
    </constructor>
    <method name="getFieldPartitioners" return="java.util.List&lt;com.cloudera.data.FieldPartitioner&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get the list of field partitioners used for partitioning.
 </p>
 <p>
 {@link FieldPartitioner}s are returned in the same order they are used
 during partition selection.
 </p>]]>
      </doc>
    </method>
    <method name="getCardinality" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Return the cardinality produced by the contained field partitioners.
 </p>
 <p>
 This can be used to aid in calculating resource usage used during certain
 operations. For example, when writing data to a partitioned dataset, this
 method can be used to estimate (or discover exactly, depending on the
 partition functions) how many leaf partitions exist.
 </p>
 <p>
 <strong>Warning:</strong> This method is allowed to lie and should be
 treated only as a hint. Some partition functions are fixed (e.g. hash
 modulo number of buckets), while others are open-ended (e.g. discrete
 value) and depend on the input data.
 </p>
 
 @return The estimated (or possibly concrete) number of leaf partitions.]]>
      </doc>
    </method>
    <method name="partitionKey" return="com.cloudera.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="values" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key with a variadic array of values corresponding to
 the field partitioners in this partition strategy.
 </p>
 <p>
 It is permitted to have fewer values than field partitioners, in which case
 all subpartititions in the unspecified parts of the key are matched by the
 key.
 </p>
 <p>
 Null values are not permitted.
 </p>]]>
      </doc>
    </method>
    <method name="partitionKeyForEntity" return="com.cloudera.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="java.lang.Object"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key for the given entity.
 </p>
 <p>
 This is a convenient way to find the partition that a given entity would be
 written to, or to find a partition using objects from the entity domain.
 </p>]]>
      </doc>
    </method>
    <method name="partitionKeyForEntity" return="com.cloudera.data.PartitionKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="entity" type="java.lang.Object"/>
      <param name="reuseKey" type="com.cloudera.data.PartitionKey"/>
      <doc>
      <![CDATA[<p>
 Construct a partition key for the given entity, reusing the supplied key if not
 null.
 </p>
 <p>
 This is a convenient way to find the partition that a given entity would be
 written to, or to find a partition using objects from the entity domain.
 </p>]]>
      </doc>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 The strategy used to determine how a dataset is partitioned.
 </p>
 <p>
 A {@code PartitionStrategy} is configured with one or more
 {@link FieldPartitioner}s upon creation. When a {@link Dataset} is configured
 with a partition strategy, we say that data is partitioned. Any entities
 written to a partitioned dataset are evaluated with its
 {@code PartitionStrategy} which, in turn, produces a {@link PartitionKey}
 that is used by the dataset implementation to select the proper partition.
 </p>
 
 @see FieldPartitioner
 @see PartitionKey
 @see DatasetDescriptor
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.PartitionStrategy -->
  <!-- start class com.cloudera.data.PartitionStrategy.Builder -->
  <class name="PartitionStrategy.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.data.PartitionStrategy&gt;"/>
    <constructor name="PartitionStrategy.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure a hash partitioner with the specified number of {@code buckets}
 .
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param buckets
          The number of buckets into which data is to be partitioned.
 @return An instance of the builder for method chaining.]]>
      </doc>
    </method>
    <method name="hash" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure a hash partitioner with the specified number of {@code buckets}
 .

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @param buckets
          The number of buckets into which data is to be partitioned.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="identity" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
      <doc>
      <![CDATA[Configure an identity partitioner with a cardinality hint of
 {@code buckets} size.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param buckets
          A hint as to the number of partitions that will be created (i.e.
          the number of discrete values for the field {@code name} in the
          data).
 @return An instance of the builder for method chaining.
 @see IdentityFieldPartitioner]]>
      </doc>
    </method>
    <method name="range" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="int[]"/>
      <doc>
      <![CDATA[Configure a range partitioner with a set of {@code upperBounds}.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param upperBounds
          A variadic list of upper bounds of each partition.
 @return An instance of the builder for method chaining.
 @see IntRangeFieldPartitioner]]>
      </doc>
    </method>
    <method name="range" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="java.lang.Comparable[]"/>
      <doc>
      <![CDATA[Configure a range partitioner with a set of {@code upperBounds}.
 
 @param name
          The entity field name from which to get values to be
          partitioned.
 @param upperBounds
          A variadic list of upper bounds of each partition.
 @return An instance of the builder for method chaining.
 @see RangeFieldPartitioner]]>
      </doc>
    </method>
    <method name="year" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the year from a timestamp field.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="month" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the month from a timestamp field.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="day" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the day from a timestamp field.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="hour" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the hour from a timestamp field.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="minute" return="com.cloudera.data.PartitionStrategy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Configure a partitioner for extracting the minute from a timestamp field.

 @param sourceName
          The entity field name from which to get values to be
          partitioned.
 @param name
          The entity field name of the partition.
 @return An instance of the builder for method chaining.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.data.PartitionStrategy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Get the configured {@link PartitionStrategy} instance.
 </p>
 <p>
 This builder should be considered single use and discarded after a call
 to this method.
 </p>
 
 @return The configured instance of {@link PartitionStrategy}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link PartitionStrategy}s.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.PartitionStrategy.Builder -->
</package>
<package name="com.cloudera.data.crunch">
  <!-- start class com.cloudera.data.crunch.CrunchDatasets -->
  <class name="CrunchDatasets" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CrunchDatasets"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="asSource" return="org.apache.crunch.io.ReadableSource&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataset" type="com.cloudera.data.Dataset"/>
      <param name="type" type="java.lang.Class&lt;E&gt;"/>
      <doc>
      <![CDATA[<p>
 Expose the given {@link Dataset} as a Crunch {@link ReadableSource}.
 </p>
 @param dataset the dataset to read from
 @param type    the Java type of the entities in the dataset
 @param <E>     the type of entity produced by the source
 @return the {@link ReadableSource}, or <code>null</code> if the dataset is not
 filesystem-based.]]>
      </doc>
    </method>
    <method name="asTarget" return="org.apache.crunch.Target"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataset" type="com.cloudera.data.Dataset"/>
      <doc>
      <![CDATA[<p>
 Expose the given {@link Dataset} as a Crunch {@link Target}.
 </p>
 @param dataset the dataset to write to
 @return the {@link Target}, or <code>null</code> if the dataset is not
 filesystem-based.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A helper class for exposing a filesystem-based dataset as a Crunch
 {@link ReadableSource} or {@link Target}.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.crunch.CrunchDatasets -->
</package>
<package name="com.cloudera.data.filesystem">
  <!-- start class com.cloudera.data.filesystem.FileSystemDatasetRepository -->
  <class name="FileSystemDatasetRepository" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.data.DatasetRepository"/>
    <constructor name="FileSystemDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} on the given {@link FileSystem} and
 root directory, and a {@link FileSystemMetadataProvider} with the same {@link
 FileSystem} and root directory.

 @param fileSystem    the filesystem to store metadata and datasets in
 @param rootDirectory the root directory for metadata and datasets]]>
      </doc>
    </constructor>
    <constructor name="FileSystemDatasetRepository" type="java.net.URI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} with a root directory at the
 given {@link URI}, and a {@link FileSystemMetadataProvider} with the same root
 directory.

 @param uri the root directory for metadata and datasets
 @since 0.3.0]]>
      </doc>
    </constructor>
    <constructor name="FileSystemDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, com.cloudera.data.MetadataProvider"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Construct a {@link FileSystemDatasetRepository} on the given {@link FileSystem} and
 root directory, with the given {@link MetadataProvider} for metadata storage.

 @param fileSystem       the filesystem to store datasets in
 @param rootDirectory    the root directory for datasets
 @param metadataProvider the provider for metadata storage]]>
      </doc>
    </constructor>
    <method name="create" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
    </method>
    <method name="update" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
    </method>
    <method name="get" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="pathForDataset" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[<p>
 Implementations should return the fully-qualified path of the data directory for
 the dataset with the given name.
 </p>
 <p>
 This method is for internal use only and users should not call it directly.
 </p>
 @since 0.2.0]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getRootDirectory" return="org.apache.hadoop.fs.Path"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the root directory in the filesystem where datasets are stored.]]>
      </doc>
    </method>
    <method name="getFileSystem" return="org.apache.hadoop.fs.FileSystem"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link FileSystem} on which datasets are stored.]]>
      </doc>
    </method>
    <method name="getMetadataProvider" return="com.cloudera.data.MetadataProvider"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@return the {@link MetadataProvider} being used by this repository.
 @since 0.2.0]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<p>
 A {@link DatasetRepository} that stores data in a Hadoop {@link FileSystem}.
 </p>
 <p>
 Given a {@link FileSystem}, a root directory, and a {@link MetadataProvider},
 this {@link DatasetRepository} implementation can load and store
 {@link Dataset}s on both local filesystems as well as the Hadoop Distributed
 FileSystem (HDFS). Users may directly instantiate this class with the three
 dependencies above and then perform dataset-related operations using any of
 the provided methods. The primary methods of interest will be
 {@link #create(String, DatasetDescriptor)}, {@link #get(String)}, and
 {@link #drop(String)} which create a new dataset, load an existing
 dataset, or delete an existing dataset, respectively. Once a dataset has been created
 or loaded, users can invoke the appropriate {@link Dataset} methods to get a reader
 or writer as needed.
 </p>

 @see DatasetRepository
 @see Dataset
 @see DatasetDescriptor
 @see PartitionStrategy
 @see MetadataProvider]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.filesystem.FileSystemDatasetRepository -->
  <!-- start class com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder -->
  <class name="FileSystemDatasetRepository.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.data.filesystem.FileSystemDatasetRepository&gt;"/>
    <constructor name="FileSystemDatasetRepository.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="rootDirectory" return="com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="org.apache.hadoop.fs.Path"/>
      <doc>
      <![CDATA[The root directory for metadata and dataset files.]]>
      </doc>
    </method>
    <method name="rootDirectory" return="com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[The root directory for metadata and dataset files.]]>
      </doc>
    </method>
    <method name="fileSystem" return="com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSystem" type="org.apache.hadoop.fs.FileSystem"/>
      <doc>
      <![CDATA[The {@link FileSystem} to store metadata and dataset files in. Optional. If not
 specified, the default filesystem will be used.]]>
      </doc>
    </method>
    <method name="metadataProvider" return="com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="metadataProvider" type="com.cloudera.data.MetadataProvider"/>
      <doc>
      <![CDATA[The {@link MetadataProvider} for metadata storage. Optional. If not
 specified, a {@link FileSystemMetadataProvider} will be used.]]>
      </doc>
    </method>
    <method name="configuration" return="com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="org.apache.hadoop.conf.Configuration"/>
      <doc>
      <![CDATA[The {@link Configuration} used to find the {@link FileSystem}. Optional. If not
 specified, the default configuration will be used.
 @since 0.3.0]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.data.filesystem.FileSystemDatasetRepository"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link FileSystemDatasetRepository}
 instances.
 @since 0.2.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.filesystem.FileSystemDatasetRepository.Builder -->
  <!-- start class com.cloudera.data.filesystem.FileSystemMetadataProvider -->
  <class name="FileSystemMetadataProvider" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.data.MetadataProvider"/>
    <constructor name="FileSystemMetadataProvider" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="load" return="com.cloudera.data.DatasetDescriptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="save"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
    </method>
    <method name="delete" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[<p>
 A {@link MetadataProvider} that stores dataset metadata in a Hadoop
 {@link FileSystem}.
 </p>
 <p>
 When configured with a root directory, this implementation serializes the
 information within a {@link DatasetDescriptor} on the provided
 {@link FileSystem}. The descriptor is serialized as an Avro object and stored
 in a directory named after the dataset name. For example, if the dataset name
 is {@code logs}, the directory {@code rootDirectory/logs/} will be created,
 if it doesn't exist, and the serialized descriptor will be stored in the file
 {@code descriptor.avro}.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.filesystem.FileSystemMetadataProvider -->
</package>
<package name="com.cloudera.data.hcatalog">
  <!-- start class com.cloudera.data.hcatalog.HCatalogDatasetRepository -->
  <class name="HCatalogDatasetRepository" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.cloudera.data.DatasetRepository"/>
    <constructor name="HCatalogDatasetRepository"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with managed tables. The location of the
 data directory is determined by the setting of
 <code>hive.metastore.warehouse.dir</code>, read from <i>hive-site.xml</i> on the
 classpath, or if no such file is found then the default for this property.
 </p>]]>
      </doc>
    </constructor>
    <constructor name="HCatalogDatasetRepository" type="java.net.URI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with external tables.
 </p>
 @param uri the root directory for datasets
 @since 0.3.0]]>
      </doc>
    </constructor>
    <constructor name="HCatalogDatasetRepository" type="org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[<p>
 Create an HCatalog dataset repository with external tables.
 </p>
 @param fileSystem    the filesystem to store datasets in
 @param rootDirectory the root directory for datasets]]>
      </doc>
    </constructor>
    <method name="create" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
    </method>
    <method name="update" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="descriptor" type="com.cloudera.data.DatasetDescriptor"/>
    </method>
    <method name="get" return="com.cloudera.data.Dataset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="drop" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[<p>
 A {@link DatasetRepository} that uses the Hive/HCatalog metastore for metadata,
 and stores data in a Hadoop {@link FileSystem}.
 </p>
 <p>
 The location of the data directory is either chosen by Hive/HCatalog (so called
 "managed tables"), or specified when creating an instance of this class by providing
 a {@link FileSystem}, and a root directory in the constructor ("external tables").
 </p>
 <p>
 The primary methods of interest will be
 {@link #create(String, DatasetDescriptor)}, {@link #get(String)}, and
 {@link #drop(String)} which create a new dataset, load an existing
 dataset, or delete an existing dataset, respectively. Once a dataset has been created
 or loaded, users can invoke the appropriate {@link Dataset} methods to get a reader
 or writer as needed.
 </p>

 @see DatasetRepository
 @see Dataset]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.hcatalog.HCatalogDatasetRepository -->
  <!-- start class com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder -->
  <class name="HCatalogDatasetRepository.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.common.base.Supplier&lt;com.cloudera.data.hcatalog.HCatalogDatasetRepository&gt;"/>
    <constructor name="HCatalogDatasetRepository.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="rootDirectory" return="com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="path" type="org.apache.hadoop.fs.Path"/>
      <doc>
      <![CDATA[The root directory for dataset files.]]>
      </doc>
    </method>
    <method name="rootDirectory" return="com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.net.URI"/>
      <doc>
      <![CDATA[The root directory for dataset files.]]>
      </doc>
    </method>
    <method name="fileSystem" return="com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fileSystem" type="org.apache.hadoop.fs.FileSystem"/>
      <doc>
      <![CDATA[The {@link FileSystem} to store dataset files in. Optional. If not
 specified, the default filesystem will be used.]]>
      </doc>
    </method>
    <method name="configuration" return="com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="configuration" type="org.apache.hadoop.conf.Configuration"/>
      <doc>
      <![CDATA[The {@link Configuration} used to find the {@link FileSystem}. Optional. If not
 specified, the default configuration will be used.]]>
      </doc>
    </method>
    <method name="get" return="com.cloudera.data.hcatalog.HCatalogDatasetRepository"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A fluent builder to aid in the construction of {@link HCatalogDatasetRepository}
 instances.
 @since 0.3.0]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.hcatalog.HCatalogDatasetRepository.Builder -->
</package>
<package name="com.cloudera.data.partition">
  <!-- start class com.cloudera.data.partition.DayOfMonthFieldPartitioner -->
  <class name="DayOfMonthFieldPartitioner" extends="com.cloudera.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="DayOfMonthFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class com.cloudera.data.partition.DayOfMonthFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.HashFieldPartitioner -->
  <class name="HashFieldPartitioner" extends="com.cloudera.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HashFieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="HashFieldPartitioner" type="java.lang.String, java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.HashFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.HourFieldPartitioner -->
  <class name="HourFieldPartitioner" extends="com.cloudera.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HourFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class com.cloudera.data.partition.HourFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.IdentityFieldPartitioner -->
  <class name="IdentityFieldPartitioner" extends="com.cloudera.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IdentityFieldPartitioner" type="java.lang.String, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.IdentityFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.IntRangeFieldPartitioner -->
  <class name="IntRangeFieldPartitioner" extends="com.cloudera.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IntRangeFieldPartitioner" type="java.lang.String, int[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.IntRangeFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.ListFieldPartitioner -->
  <class name="ListFieldPartitioner" extends="com.cloudera.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ListFieldPartitioner" type="java.lang.String, java.util.List&lt;java.util.Set&lt;?&gt;&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.ListFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.MinuteFieldPartitioner -->
  <class name="MinuteFieldPartitioner" extends="com.cloudera.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MinuteFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class com.cloudera.data.partition.MinuteFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.MonthFieldPartitioner -->
  <class name="MonthFieldPartitioner" extends="com.cloudera.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MonthFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.MonthFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.PartitionFunctions -->
  <class name="PartitionFunctions" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PartitionFunctions"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="hash" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="hash" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="identity" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="buckets" type="int"/>
    </method>
    <method name="range" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="int[]"/>
    </method>
    <method name="range" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="upperBounds" type="java.lang.Comparable[]"/>
    </method>
    <method name="year" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="month" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="day" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="hour" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <method name="minute" return="com.cloudera.data.FieldPartitioner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sourceName" type="java.lang.String"/>
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Convenience class so you can say, for example, <code>hash("username", 2)</code> in
 JEXL.]]>
    </doc>
  </class>
  <!-- end class com.cloudera.data.partition.PartitionFunctions -->
  <!-- start class com.cloudera.data.partition.RangeFieldPartitioner -->
  <class name="RangeFieldPartitioner" extends="com.cloudera.data.FieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="RangeFieldPartitioner" type="java.lang.String, java.lang.Comparable[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="apply" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="valueFromString" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringValue" type="java.lang.String"/>
    </method>
    <method name="getUpperBounds" return="java.util.List&lt;java.lang.Comparable&lt;?&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
  </class>
  <!-- end class com.cloudera.data.partition.RangeFieldPartitioner -->
  <!-- start class com.cloudera.data.partition.YearFieldPartitioner -->
  <class name="YearFieldPartitioner" extends="com.cloudera.data.partition.CalendarFieldPartitioner"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="YearFieldPartitioner" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
  </class>
  <!-- end class com.cloudera.data.partition.YearFieldPartitioner -->
</package>

</api>
